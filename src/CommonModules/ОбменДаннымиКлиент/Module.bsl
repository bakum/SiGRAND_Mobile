Процедура ОбменДаннымиСОАП() Экспорт	
	Если ОбменДаннымиСервер.ЗаписатьИзмененияВЦентральнуюБазу() Тогда
		ОбменДаннымиСервер.УдалитьДанныеПоНеавторизованномуПользователю();
		Отказ = ОбменДаннымиСервер.ТекущийПользовательРазрешен();
	Иначе
		//Отказ = Истина;
		Сообщить("Синхронизация отменена! Невозможно сохранить данные на удаленный сервер.
				 |Возможно проблемы с интернетом.");
		Возврат;		 
	КонецЕсли;	
	Если НЕ Отказ Тогда			
		ОбновитьНастройкиПользователяСОАП(МобильноеПриложениеСервер.ТекущийПользовательИБ());
		ОбновитьСтатусыСОАП();
		ОбновитьИнфокартыСОАП();
		ОбновитьЕдиницыИзмеренияСОАП();
		ОбновитьНоменклатуруСОАП();
		ОбновитьПрайсЛистСОАП();
		ОбновитьГородаСОАП();
		ОбновитьЗаказыСОАП();
		ОбменДаннымиСервер.СброситьВсеИзмененияНаСервере();
	Иначе
		ОбменДаннымиСервер.ОкончательноеУдалениеДанных();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьКоординатыПоАдресу(Адрес) Экспорт
	Координаты = Новый Структура;
	АдресСервера = "maps.googleapis.com/maps/";
	Защищенное = Ложь;
	HTTPConnect = новый HTTPСоединение(АдресСервера,,,,,Защищенное);
	//HTTPConnect = новый HTTPСоединение();
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	HTTPConnect.Получить("api/geocode/xml?address="+Адрес+"&sensor=false&language=ru",	ИмяВыходногоФайла);
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/GeocodeResponse/status",Лист.ЭлементДокумента,Разыменователь);
	Элемент = РезультатПоиска.ПолучитьСледующий();
	Если Элемент <> Неопределено Тогда
		Статус = СокрЛП(Элемент.ТекстовоеСодержимое);
		Если Статус <> "OK" Тогда
			Возврат Неопределено;	
		КонецЕсли;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Поиск = Лист.ВычислитьВыражениеXPath("/GeocodeResponse/result/geometry/location/lat",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если Поиск <> Неопределено Тогда
		Координаты.Вставить("lat",СокрЛП(Поиск.ТекстовоеСодержимое));
	КонецЕсли;
	
	Поиск = Лист.ВычислитьВыражениеXPath("/GeocodeResponse/result/geometry/location/lng",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если Поиск <> Неопределено Тогда
		Координаты.Вставить("lng",СокрЛП(Поиск.ТекстовоеСодержимое));
	КонецЕсли;
	
	Возврат Координаты;


КонецФункции	

Процедура ОбменДаннымиRest() Экспорт	
	Настройки = ОбменДаннымиСервер.ПолучитьНастройкиРЕСТ();
	Если ОбменДаннымиСервер.ЗаписатьИзмененияВЦентральнуюБазу() Тогда
		ОбменДаннымиСервер.УдалитьДанныеПоНеавторизованномуПользователю();
		Отказ = ОбменДаннымиСервер.ТекущийПользовательРазрешен();
	Иначе
		Отказ = Истина;
		Сообщить("Синхронизация отменена! Невозможно сохранить данные на удаленный сервер.
				 |Возможно проблемы с интернетом.");
	КонецЕсли;	
	Если НЕ Отказ Тогда		
		Защищенное = Ложь;
		HTTPConnect = новый HTTPСоединение(Настройки.АдресСервера,,Настройки.СистемныйПользователь,
						Настройки.СистемныйПароль,,Защищенное);
		ОбновитьНастройкиПользователя(HTTPConnect, МобильноеПриложениеСервер.ТекущийПользовательИБ());
		ОбновитьСтатусы(HTTPConnect, МобильноеПриложениеСервер.ТекущийПользовательИБ());
		ОбновитьЕдиницыИзмерения(HTTPConnect);
		ОбновитьНоменклатуру(HTTPConnect);
		ОбновитьПрайсЛист(HTTPConnect);
		ОбновитьЗаказы(HTTPConnect);
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьНастройкиПользователя(HTTPConnect, Логин)
	ИдПользователя = ОбменДаннымиСервер.ПолучитьИдПользователяПоНаименованию(Логин);
	ОбновитьОсновныеНастройкиПользователя(HTTPConnect, ИдПользователя);
	ОбновитьНастройкиКассы(HTTPConnect, ИдПользователя);
КонецПроцедуры

Процедура ОбновитьНастройкиПользователяСОАП(Логин)
	ИдПользователя = ОбменДаннымиСервер.ПолучитьИдПользователяПоНаименованию(Логин);
	ОбновитьОсновныеНастройкиПользователяСОАП(ИдПользователя);
	ОбновитьНастройкиКассыСОАП(ИдПользователя);
КонецПроцедуры

Процедура ОбновитьОсновныеНастройкиПользователяСОАП(Логин)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select * from user_settings where user_id like '"+Логин+"'";
	ОбменДаннымиСервер.ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:ZAMERKONTRAG_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска = Неопределено Тогда
			ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:KONTRAG_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
			Если ЭлементПоиска = неопределено Тогда
				Прервать;
			КонецЕсли;	
		КонецЕсли;
		ОбновитьКонтрагентаСОАП(ЭлементПоиска.ТекстовоеСодержимое, 1);		
	КонецЦикла;
КонецПроцедуры	

Процедура ОбновитьНастройкиКассыСОАП(Логин)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select kassa_id, (select fullname from kassa where id=kassa_id) kassa_name from kassa_settings where user_id like '"+Логин+"'";
	ОбменДаннымиСервер.ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если РезультатПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW",РезультатПоиска,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv"));
	Пока Истина Цикл
		ЗаписьКассы = Новый Соответствие;
		Элемент = ЭлементПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:KASSA_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьКассы.Вставить("id",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:KASSA_NAME",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьКассы.Вставить("fullname",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		ОбменДаннымиСервер.ВыполнитьСинхронизациюКасс(ЗаписьКассы);
	КонецЦикла;	
КонецПроцедуры	

Процедура ОбновитьОсновныеНастройкиПользователя(HTTPConnect, Логин)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	HTTPConnect.Получить("restful/usersettings/"+Логин+"/user",ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/userSettings/zamerkontragId",Лист.ЭлементДокумента,Разыменователь);
	Элемент = РезультатПоиска.ПолучитьСледующий();
	Если Элемент = Неопределено Тогда
		РезультатПоиска = Лист.ВычислитьВыражениеXPath("/userSettings/kontragId",Лист.ЭлементДокумента,Разыменователь);
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Поиск = Лист.ВычислитьВыражениеXPath("id",Элемент,Разыменователь);
	ЭлементПоиска = Поиск.ПолучитьСледующий();
	ЗаписьКонтрагента = Новый Соответствие;
	Если ЭлементПоиска <> Неопределено Тогда
		ЗаписьКонтрагента.Вставить("id",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
	КонецЕсли;
	
	Поиск = Лист.ВычислитьВыражениеXPath("fullname",Элемент,Разыменователь);
	ЭлементПоиска = Поиск.ПолучитьСледующий();
	Если ЭлементПоиска <> Неопределено Тогда
		ЗаписьКонтрагента.Вставить("fullname",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
	КонецЕсли;
	
	Поиск = Лист.ВычислитьВыражениеXPath("isBuyer",Элемент,Разыменователь);
	ЭлементПоиска = Поиск.ПолучитьСледующий();
	Если ЭлементПоиска <> Неопределено Тогда
		ЗаписьКонтрагента.Вставить("isBuyer",Число(ЭлементПоиска.ТекстовоеСодержимое));
	КонецЕсли;

	Поиск = Лист.ВычислитьВыражениеXPath("isMeasurer",Элемент,Разыменователь);
	ЭлементПоиска = Поиск.ПолучитьСледующий();
	Если ЭлементПоиска <> Неопределено Тогда
		ЗаписьКонтрагента.Вставить("isMeasurer",Число(ЭлементПоиска.ТекстовоеСодержимое));
	КонецЕсли;
	
	Поиск = Лист.ВычислитьВыражениеXPath("isSupplier",Элемент,Разыменователь);
	ЭлементПоиска = Поиск.ПолучитьСледующий();
	Если ЭлементПоиска <> Неопределено Тогда
		ЗаписьКонтрагента.Вставить("isSupplier",Число(ЭлементПоиска.ТекстовоеСодержимое));
	КонецЕсли;
	
	Поиск = Лист.ВычислитьВыражениеXPath("parentId/id",Элемент,Разыменователь);
	ЭлементПоиска = Поиск.ПолучитьСледующий();
	Если ЭлементПоиска <> Неопределено Тогда
		ЗаписьКонтрагента.Вставить("parentId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
	КонецЕсли;


	ОбменДаннымиСервер.ВыполнитьСинхронизациюНастроек(ЗаписьКонтрагента);
КонецПроцедуры

Процедура ОбновитьНастройкиКассы(HTTPConnect, Логин)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	HTTPConnect.Получить("restful/kassasettings/"+Логин+"/user",ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("kassaSettings",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьКассы = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("kassaId/id",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьКассы.Вставить("id",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("kassaId/fullname",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьКассы.Вставить("fullname",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ОбменДаннымиСервер.ВыполнитьСинхронизациюКасс(ЗаписьКассы);
	КонецЦикла;	
КонецПроцедуры	

Процедура ОбновитьЕдиницыИзмерения(HTTPConnect)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	HTTPConnect.Получить("restful/measure",ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("measureUnit",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьЕдиницы = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("id",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЕдиницы.Вставить("id",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("code",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЕдиницы.Вставить("code",Число(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("fullname",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЕдиницы.Вставить("fullname",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
				
		ОбменДаннымиСервер.ВыполнитьСинхронизациюЕдИзмерения(ЗаписьЕдиницы);
	КонецЦикла;		
КонецПроцедуры

Процедура ОбновитьЕдиницыИзмеренияСОАП()
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select * from measure_unit";
	ОбменДаннымиСервер.ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если РезультатПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW",РезультатПоиска,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv"));
	Пока Истина Цикл
		ЗаписьЕдиницы = Новый Соответствие;
		Элемент = ЭлементПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЕдиницы.Вставить("id",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:CODE",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЕдиницы.Вставить("code",Число(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:FULLNAME",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЕдиницы.Вставить("fullname",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		ОбменДаннымиСервер.ВыполнитьСинхронизациюЕдИзмерения(ЗаписьЕдиницы);
	КонецЦикла;	
КонецПроцедуры	

Процедура ОбновитьСтатусы(HTTPConnect, Логин)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	HTTPConnect.Получить("restful/status/"+Логин+"/userStatuses",ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("orderStatus",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьСтатуса = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("id",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьСтатуса.Вставить("id",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("name",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьСтатуса.Вставить("name",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("fullname",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьСтатуса.Вставить("fullname",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ОбменДаннымиСервер.ВыполнитьСинхронизациюСтатусов(ЗаписьСтатуса);
	КонецЦикла;
	//УдалитьФайлы(ИмяВыходногоФайла);		
КонецПроцедуры

Процедура ОбновитьСтатусыСОАП()
	ТекущаяРоль = МобильноеПриложениеСервер.ТекущаяРоль();
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Если НЕ ЗначениеЗаполнено(ТекущаяРоль) Тогда
		Возврат;
	КонецЕсли;	
	Если ТекущаяРоль = "Замерщик" Тогда
		Запрос = "select * from order_status where name in ('Новый','Замер','НеОплачен','Контроль')";
	Иначе
		Запрос = "select * from order_status";
	КонецЕсли;	
	
	ОбменДаннымиСервер.ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если РезультатПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW",РезультатПоиска,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv"));
	Пока Истина Цикл
		ЗаписьСтатуса = Новый Соответствие;
		Элемент = ЭлементПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьСтатуса.Вставить("id",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:NAME",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьСтатуса.Вставить("name",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:FULLNAME",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьСтатуса.Вставить("fullname",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		ОбменДаннымиСервер.ВыполнитьСинхронизациюСтатусов(ЗаписьСтатуса);
	КонецЦикла;	
КонецПроцедуры	

Процедура ОбновитьНоменклатуру(HTTPConnect)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	HTTPConnect.Получить("restful/nomenklatura",ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("nomenklatura",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьНоменклатуры = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("id",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьНоменклатуры.Вставить("id",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("isGroup",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьНоменклатуры.Вставить("isGroup",Число(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("fullname",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьНоменклатуры.Вставить("fullname",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("parentId/id",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьНоменклатуры.Вставить("parentId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ОбменДаннымиСервер.ВыполнитьСинхронизациюНоменклатуры(ЗаписьНоменклатуры);
	КонецЦикла;
	ОбменДаннымиСервер.УтрястиИерархиюНоменклатуры();
	//УдалитьФайлы(ИмяВыходногоФайла);		
КонецПроцедуры

Процедура ОбновитьНоменклатуруСОАП()
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select * from nomenklatura";
	ОбменДаннымиСервер.ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если РезультатПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW",РезультатПоиска,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv"));
	Пока Истина Цикл
		ЗаписьНоменклатуры = Новый Соответствие;
		Элемент = ЭлементПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьНоменклатуры.Вставить("id",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:IS_GROUP",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьНоменклатуры.Вставить("isGroup",Число(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:FULLNAME",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьНоменклатуры.Вставить("fullname",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:PARENT_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьНоменклатуры.Вставить("parentId",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		ОбменДаннымиСервер.ВыполнитьСинхронизациюНоменклатуры(ЗаписьНоменклатуры);
	КонецЦикла;	
	ОбменДаннымиСервер.УтрястиИерархиюНоменклатуры();
КонецПроцедуры	

Процедура ОбновитьПрайсЛист(HTTPConnect)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	HTTPConnect.Получить("restful/price",ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("lastPrices",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьЦены = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("nomId",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЦены.Вставить("nomId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("priceGoods",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЦены.Вставить("priceGoods",Число(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("priceUsl",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЦены.Вставить("priceUsl",Число(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("measureId",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЦены.Вставить("measureId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
				
		ОбменДаннымиСервер.ВыполнитьСинхронизациюЦены(ЗаписьЦены);
	КонецЦикла;
	//ОбменДаннымиСервер.УтрястиИерархиюНоменклатуры();
	//УдалитьФайлы(ИмяВыходногоФайла);		
КонецПроцедуры

Процедура ОбновитьПрайсЛистСОАП()
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select * from last_prices";
	ОбменДаннымиСервер.ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если РезультатПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW",РезультатПоиска,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv"));
	Пока Истина Цикл
		ЗаписьЦены = Новый Соответствие;
		Элемент = ЭлементПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:NOM_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЦены.Вставить("nomId",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:PRICE_GOODS",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЦены.Вставить("priceGoods",Число(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:PRICE_USL",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЦены.Вставить("priceUsl",Число(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:ED_IZM",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЦены.Вставить("measureId",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		ОбменДаннымиСервер.ВыполнитьСинхронизациюЦены(ЗаписьЦены);
	КонецЦикла;	

КонецПроцедуры	

Процедура ОбновитьГородаСОАП()
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select * from cityes";
	ОбменДаннымиСервер.ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если РезультатПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW",РезультатПоиска,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv"));
	Пока Истина Цикл
		ЗаписьГорода = Новый Соответствие;
		Элемент = ЭлементПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьГорода.Вставить("id",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:FULLNAME",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьГорода.Вставить("fullname",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
				
		ОбменДаннымиСервер.ВыполнитьСинхронизациюГорода(ЗаписьГорода);
	КонецЦикла;	

КонецПроцедуры	

Процедура ОбновитьИнфокартыСОАП()
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select * from infocard";
	ОбменДаннымиСервер.ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если РезультатПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW",РезультатПоиска,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv"));
	Пока Истина Цикл
		ЗаписьКарты = Новый Соответствие;
		Элемент = ЭлементПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьКарты.Вставить("id",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:FULLNAME",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьКарты.Вставить("fullname",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:SUMMA",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьКарты.Вставить("summa",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
				
		ОбменДаннымиСервер.ВыполнитьСинхронизациюИнфоКарт(ЗаписьКарты);
	КонецЦикла;	

КонецПроцедуры	


Процедура ОбновитьЗаказы(HTTPConnect)
	Логин = МобильноеПриложениеСервер.ТекущийПользователь();
	
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	HTTPConnect.Получить("restful/orders/"+Логин+"/userOrders",ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("orders",Лист.ЭлементДокумента,Разыменователь);
	
	Пока Истина Цикл
		ЗаписьЗаказа = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		//Дата = AnyDateStrToDate("2016-08-04T09:30:00+03:00");
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("datZam",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("datZam",AnyDateStrToDate(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("dat",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("dat",AnyDateStrToDate(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("num",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("num",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("datComplete",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("datComplete",AnyDateStrToDate(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("discription",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("discription",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("id",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("id",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("statusId/id",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("statusId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("kontragId/id",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("kontragId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
			//ОбновитьКонтрагента(HTTPConnect, СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
			ОбновитьКонтрагентаСОАП(СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("zamerId/id",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("zamerId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
			//ОбновитьКонтрагента(HTTPConnect, СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
			ОбновитьКонтрагентаСОАП(СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("userId/id",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("managerId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
			ОбновитьМенеджера(HTTPConnect, СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;

				
		ОбменДаннымиСервер.ВыполнитьСинхронизациюЗаказа(ЗаписьЗаказа);
		ОбновитьТабличнуюЧастьОплатыЗаказа(HTTPConnect, ЗаписьЗаказа["id"]);
		ОбновитьТабличнуюЧастьУслугиЗаказа(HTTPConnect, ЗаписьЗаказа["id"]);
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьЗаказыСОАП()
	РольПользователя = МобильноеПриложениеСервер.ТекущаяРоль();
	КонтрагентИд = МобильноеПриложениеСервер.ПолучитьИдКонтрагента();
	Логин = МобильноеПриложениеСервер.ТекущийПользовательИБ();
	Если НЕ ЗначениеЗаполнено(КонтрагентИд) Тогда
		Возврат;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(РольПользователя) Тогда
		Возврат;
	КонецЕсли;	
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select to_char(dat,'yyyy-MM-dd') dat, 
	|to_char(dat_complete,'yyyy-MM-dd') dat_complete, 
	|to_char(dat_zam,'yyyy-MM-dd HH24:MI:SS') dat_zam, 
	|num, discription, id, status_id, kontrag_id, zamer_id, user_id 
	|from orders where deleted = 0 and status_id in (select id from order_status where name in ('Новый','Замер','НеОплачен'))";
	Если РольПользователя = "Замерщик" Тогда
		Запрос = Запрос + " and zamer_id like '"+КонтрагентИд+"'";
	Иначе
		Запрос = Запрос + " and upper(user_id) in (select upper(N) from table(cast(get_users('"+Логин+"') as userTable)))";	
	КонецЕсли;	
	ОбменДаннымиСервер.ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если РезультатПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW",РезультатПоиска,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv"));
	Пока Истина Цикл
		ЗаписьЗаказа = Новый Соответствие;
		Элемент = ЭлементПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:DAT_ZAM",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("datZam",AnyDateStrToDate(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:DAT",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("dat",AnyDateStrToDate(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:NUM",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("num",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:DAT_COMPLETE",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("datComplete",AnyDateStrToDate(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:DISCRIPTION",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("discription",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("id",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:STATUS_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("statusId",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:KONTRAG_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("kontragId",СокрЛП(Поиск.ТекстовоеСодержимое));
			ОбновитьКонтрагентаСОАП(СокрЛП(Поиск.ТекстовоеСодержимое));
			ОбновитьКонтактнуюИнформациюСОАП(СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:ZAMER_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("zamerId",СокрЛП(Поиск.ТекстовоеСодержимое));
			ОбновитьКонтрагентаСОАП(СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:USER_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьЗаказа.Вставить("managerId",СокрЛП(Поиск.ТекстовоеСодержимое));
			ОбновитьМенеджераСОАП(СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		ОбменДаннымиСервер.ВыполнитьСинхронизациюЗаказа(ЗаписьЗаказа);
		ОбновитьТабличнуюЧастьОплатыЗаказаСОАП(ЗаписьЗаказа["id"]);
		ОбновитьТабличнуюЧастьУслугиЗаказаСОАП(ЗаписьЗаказа["id"]);
	КонецЦикла;
КонецПроцедуры	

Процедура ОбновитьТабличнуюЧастьОплатыЗаказа(HTTPConnect, Ид)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	HTTPConnect.Получить("restful/orders/"+Ид+"/oplatyList",ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("ordersTpOplaty",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьОплаты = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЗаписьОплаты.Вставить("orderId",Ид);
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("dat",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьОплаты.Вставить("dat",AnyDateStrToDate(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("sum",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьОплаты.Вставить("sum",Число(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("kassaId",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьОплаты.Вставить("kassaId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("zamerId",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьОплаты.Вставить("zamerId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;

		
		ОбменДаннымиСервер.ВыполнитьСинхронизациюТЧОплаты(ЗаписьОплаты);

     КонецЦикла;
 КонецПроцедуры	
 
 Процедура ОбновитьТабличнуюЧастьОплатыЗаказаСОАП(Ид)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select id, order_id, to_char(dat,'yyyy-MM-dd') dat, 
	|sum, zamer_id, user_id, kassa_id from orders_tp_oplaty 
	|where order_id = '"+Ид+"'";
	ОбменДаннымиСервер.ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если РезультатПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW",РезультатПоиска,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv"));
	Пока Истина Цикл
		ЗаписьОплаты = Новый Соответствие;
		Элемент = ЭлементПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЗаписьОплаты.Вставить("orderId",Ид);
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:DAT",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьОплаты.Вставить("dat",AnyDateStrToDate(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:SUM",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьОплаты.Вставить("sum",Число(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:KASSA_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьОплаты.Вставить("kassaId",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:ZAMER_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьОплаты.Вставить("zamerId",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:USER_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьОплаты.Вставить("userId",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьОплаты.Вставить("id",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
				
		ОбменДаннымиСервер.ВыполнитьСинхронизациюТЧОплаты(ЗаписьОплаты);
	КонецЦикла;

КонецПроцедуры	 
 
Процедура ОбновитьТабличнуюЧастьУслугиЗаказа(HTTPConnect, Ид)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	HTTPConnect.Получить("restful/orders/"+Ид+"/uslugiList",ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("ordersTpUslugi",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьУслуги = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЗаписьУслуги.Вставить("orderId",Ид);
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("groupId",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьУслуги.Вставить("groupId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("measureId",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьУслуги.Вставить("measureId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("nomId",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьУслуги.Вставить("nomId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("quantity",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьУслуги.Вставить("quantity",Число(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("price",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьУслуги.Вставить("price",Число(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("priceAdd",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьУслуги.Вставить("priceAdd",Число(ЭлементПоиска.ТекстовоеСодержимое));
		Иначе
			ЗаписьУслуги.Вставить("priceAdd",0);
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("addWork",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьУслуги.Вставить("addWork",Число(ЭлементПоиска.ТекстовоеСодержимое));
		Иначе
			ЗаписьУслуги.Вставить("addWork","");
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("summ",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьУслуги.Вставить("summ",Число(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("sotrId",Элемент,Разыменователь).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьУслуги.Вставить("sotrId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;


		
		ОбменДаннымиСервер.ВыполнитьСинхронизациюТЧУслуги(ЗаписьУслуги);

     КонецЦикла;
КонецПроцедуры	

Процедура ОбновитьТабличнуюЧастьУслугиЗаказаСОАП(Ид)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select id, order_id, to_char(dat_to_pay,'yyyy-MM-dd') dat_to_pay, 
	|to_char(dat_complete,'yyyy-MM-dd') dat_complete, price,
	|summ, nom_id, sotr_id, group_id, measure_id, quantity from orders_tp_uslugi 
	|where order_id = '"+Ид+"'";
	ОбменДаннымиСервер.ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если РезультатПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW",РезультатПоиска,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv"));
	Пока Истина Цикл
		ЗаписьУслуги = Новый Соответствие;
		Элемент = ЭлементПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЗаписьУслуги.Вставить("orderId",Ид);
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:GROUP_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьУслуги.Вставить("groupId",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		Поиск = Лист.ВычислитьВыражениеXPath("ns:MEASURE_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьУслуги.Вставить("measureId",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:NOM_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьУслуги.Вставить("nomId",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:QUANTITY",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьУслуги.Вставить("quantity",Число(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:PRICE",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьУслуги.Вставить("price",Число(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:PRICE_ADD",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьУслуги.Вставить("priceAdd",Число(Поиск.ТекстовоеСодержимое));
		Иначе
			ЗаписьУслуги.Вставить("priceAdd",0);
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:ADD_WORK",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьУслуги.Вставить("addWork",СокрЛП(Поиск.ТекстовоеСодержимое));
		Иначе
			ЗаписьУслуги.Вставить("addWork","");
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:SUMM",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьУслуги.Вставить("summ",Число(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:SOTR_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьУслуги.Вставить("sotrId",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьУслуги.Вставить("id",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;

				
		ОбменДаннымиСервер.ВыполнитьСинхронизациюТЧУслуги(ЗаписьУслуги);
	КонецЦикла;

КонецПроцедуры	

Процедура ОбновитьКонтрагентаСОАП(Ид, ЭтоНастройкиПользователя = 0)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select * from kontragents where id like '"+Ид+"'";
	ОбменДаннымиСервер.ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьКонтрагента = Новый Соответствие;
		ЗаписьКонтрагента.Вставить("id",Ид);
		ЗаписьКонтрагента.Вставить("is_usersettings", ЭтоНастройкиПользователя);
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:FULLNAME",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьКонтрагента.Вставить("fullname",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:IS_BUYER",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьКонтрагента.Вставить("isBuyer",Число(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:IS_MEASURER",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьКонтрагента.Вставить("isMeasurer",Число(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:IS_SUPPLIER",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьКонтрагента.Вставить("isSupplier",Число(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:PARENT_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьКонтрагента.Вставить("parentId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:CITY_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьКонтрагента.Вставить("cityId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:INFOCARD_ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьКонтрагента.Вставить("infocardId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		ОбменДаннымиСервер.ВыполнитьСинхронизациюКонтрагента(ЗаписьКонтрагента);
	КонецЦикла;


КонецПроцедуры	

Процедура ОбновитьКонтактнуюИнформациюСОАП(Ид)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select id, adress, phone, email, kontrag_id from contact_details 
	|where kontrag_id like '"+Ид+"'";
	ОбменДаннымиСервер.ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если РезультатПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW",РезультатПоиска,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv"));
	Пока Истина Цикл
		ЗаписьИнформации = Новый Соответствие;
		Элемент = ЭлементПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЗаписьИнформации.Вставить("kontrag_id",Ид);
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:ADRESS",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьИнформации.Вставить("adress",СокрЛП(Поиск.ТекстовоеСодержимое));
		Иначе
			ЗаписьИнформации.Вставить("adress","");
		КонецЕсли;
				
		Поиск = Лист.ВычислитьВыражениеXPath("ns:PHONE",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьИнформации.Вставить("phone",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:EMAIL",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьИнформации.Вставить("email",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;

		
		Поиск = Лист.ВычислитьВыражениеXPath("ns:ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если Поиск <> Неопределено Тогда
			ЗаписьИнформации.Вставить("id",СокрЛП(Поиск.ТекстовоеСодержимое));
		КонецЕсли;
				
		ОбменДаннымиСервер.ВыполнитьСинхронизациюКонтактнойИнформации(ЗаписьИнформации);
	КонецЦикла;

КонецПроцедуры	

Процедура ОбновитьКонтрагента(HTTPConnect, Ид)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	HTTPConnect.Получить("restful/kontragents/"+Ид+"",ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("fullname",Лист.ЭлементДокумента,Разыменователь);
	
	ЗаписьКонтрагента = Новый Соответствие;
	ЗаписьКонтрагента.Вставить("id",Ид);
	ЭлементПоиска = РезультатПоиска.ПолучитьСледующий();
	Если ЭлементПоиска <> Неопределено Тогда
		ЗаписьКонтрагента.Вставить("fullname",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
	КонецЕсли;
	
	ЭлементПоиска = Лист.ВычислитьВыражениеXPath("isBuyer",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если ЭлементПоиска <> Неопределено Тогда
		ЗаписьКонтрагента.Вставить("isBuyer",Число(ЭлементПоиска.ТекстовоеСодержимое));
	КонецЕсли;
	
	ЭлементПоиска = Лист.ВычислитьВыражениеXPath("isMeasurer",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если ЭлементПоиска <> Неопределено Тогда
		ЗаписьКонтрагента.Вставить("isMeasurer",Число(ЭлементПоиска.ТекстовоеСодержимое));
	КонецЕсли;
	
	ЭлементПоиска = Лист.ВычислитьВыражениеXPath("isSupplier",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если ЭлементПоиска <> Неопределено Тогда
		ЗаписьКонтрагента.Вставить("isSupplier",Число(ЭлементПоиска.ТекстовоеСодержимое));
	КонецЕсли;
	
	ЭлементПоиска = Лист.ВычислитьВыражениеXPath("parentId/id",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если ЭлементПоиска <> Неопределено Тогда
		ЗаписьКонтрагента.Вставить("parentId",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
	КонецЕсли;
	
	ОбменДаннымиСервер.ВыполнитьСинхронизациюКонтрагента(ЗаписьКонтрагента);

КонецПроцедуры

Процедура ОбновитьМенеджера(HTTPConnect, Ид)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	HTTPConnect.Получить("restful/users/"+Ид+"",ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("login",Лист.ЭлементДокумента,Разыменователь);
	
	ЗаписьМенеджера = Новый Соответствие;
	ЗаписьМенеджера.Вставить("id",Ид);
	ЭлементПоиска = РезультатПоиска.ПолучитьСледующий();
	Если ЭлементПоиска <> Неопределено Тогда
		ЗаписьМенеджера.Вставить("login",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
	КонецЕсли;
	
	ЭлементПоиска = Лист.ВычислитьВыражениеXPath("lastName",Лист.ЭлементДокумента,Разыменователь).ПолучитьСледующий();
	Если ЭлементПоиска <> Неопределено Тогда
		ЗаписьМенеджера.Вставить("lastName",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
	КонецЕсли;
		
	ОбменДаннымиСервер.ВыполнитьСинхронизациюМенеджера(ЗаписьМенеджера);

КонецПроцедуры

Процедура ОбновитьМенеджераСОАП(Ид)
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select * from users where id like '"+Ид+"'";
	ОбменДаннымиСервер.ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьМенеджера = Новый Соответствие;
		ЗаписьМенеджера.Вставить("id",Ид);
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:LOGIN",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьМенеджера.Вставить("login",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
				
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:LAST_NAME",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			ЗаписьМенеджера.Вставить("lastName",СокрЛП(ЭлементПоиска.ТекстовоеСодержимое));
		КонецЕсли;
		ОбменДаннымиСервер.ВыполнитьСинхронизациюМенеджера(ЗаписьМенеджера);
	КонецЦикла;

КонецПроцедуры	


//////////////////////////////////////////////////////////////////////////////////
//  Функция преобразует дату форматов
//  1. Submitted to W3C 15 September 1997 http://www.w3.org/TR/NOTE-datetime
//  2. GNU формат   http://www.gnu.org/software/tar/manual/html_node/Date-input-formats.html#SEC119
//  в дату 1С
// GNU поддерживается не полностью:
//  - микросекунды не могут отделять ",", а только "."
//  - зоны только GMT UTC Z
//  - не поддерживаются форматы в описании  7.6, 7.7, 7.8, 7.9
// Автор: В.Косилов
Функция AnyDateStrToDate(Знач СтрокаДаты)
    //  The formats are as follows. Exactly the components shown here must be present, with exactly this punctuation.
    //Note that the "T" appears literally in the string, to indicate the beginning of the time element, as specified in ISO 8601.
    //   Year:
    //    YYYY (eg 1997)
    //   Year and month:
    //    YYYY-MM (eg 1997-07)
    //   Complete date:
    //    YYYY-MM-DD (eg 1997-07-16)
    //   Complete date plus hours and minutes:
    //    YYYY-MM-DDThh:mmTZD (eg 1997-07-16T19:20+01:00)
    //   Complete date plus hours, minutes and seconds:
    //    YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
    //   Complete date plus hours, minutes, seconds and a decimal fraction of a
    //second
    //    YYYY-MM-DDThh:mm:ss.sTZD (eg 1997-07-16T19:20:30.45+01:00)
    если СтрДлина(СтрокаДаты) = 4 и ПроверкаЧисло(СтрокаДаты)<>неопределено  тогда
        //   Year:
        //    YYYY (eg 1997)
        возврат Дата(СтрокаДаты,1,1);
    иначеесли СтрДлина(СтрокаДаты) = 7 и ПроверкаЧисло(СтрЗаменить(СтрокаДаты,"-",""))<>неопределено и
        ПроверкаЧисло(Лев(СтрокаДаты,4))<>неопределено тогда
        //   Year and month:
        //    YYYY-MM (eg 1997-07)
        СтрокаДаты = СтрЗаменить(СтрокаДаты,"-","");
        СтрокаДаты=СтрокаДаты+"01";
        возврат Дата(СтрокаДаты);
    иначеесли СтрДлина(СтрокаДаты) = 8 и ПроверкаЧисло(СтрокаДаты)<>неопределено тогда
        // YYYYMMDD
        возврат Дата(СтрокаДаты);
    иначеесли СтрДлина(СтрокаДаты) = 10 и ПроверкаЧисло(СтрЗаменить(СтрокаДаты,"-",""))<>неопределено и
        ПроверкаЧисло(лев(СтрокаДаты,4))<>неопределено и ПроверкаЧисло(Сред(СтрокаДаты,6,2))<>неопределено и
        ПроверкаЧисло(Сред(СтрокаДаты,9,2))<>неопределено тогда
        //   Complete date:
        //    YYYY-MM-DD (eg 1997-07-16)
        СтрокаДаты = СтрЗаменить(СтрокаДаты,"-","");
        возврат Дата(СтрокаДаты);
    иначеесли СтрДлина(СтрокаДаты) > 10 и ПроверкаЧисло(СтрЗаменить(Лев(СтрокаДаты,10),"-",""))<>неопределено   // первая часть предположительно дата
            и (Сред(СтрокаДаты,11,1)="T") // Разделитель даты и времени на своем месте
            и (Найти(СтрокаДаты,"Z")>0 или Найти(СтрокаДаты,"+")>0 или Найти(СтрокаДаты,"-")>0) // присутствует TZD
            тогда
            //   Complete date plus hours and minutes:
            //    YYYY-MM-DDThh:mmTZD (eg 1997-07-16T19:20+01:00)
            //   Complete date plus hours, minutes and seconds:
            //    YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
            //   Complete date plus hours, minutes, seconds and a decimal fraction of a
            //second
            //    YYYY-MM-DDThh:mm:ss.sTZD (eg 1997-07-16T19:20:30.45+01:00)
            // Выделим Дату в формат YYYYMMDD
            ТолькоДата = СтрЗаменить(Лев(СтрокаДаты,10),"-","");
            // Выделим Время в форматы hh:mm или hh:mm:ss или hh:mm:ss.s
            СимвZ = Найти(Сред(СтрокаДаты,12,20),"Z");
            СимвПлюс = Найти(Сред(СтрокаДаты,12,20),"+");
            СимвМинус = Найти(Сред(СтрокаДаты,12,20),"-");
            ДлинаВремени = ?(СимвZ>0,СимвZ, ?(СимвПлюс>0, СимвПлюс, СимвМинус))-1;
            ТолькоВремя =  Сред(СтрокаДаты,12, ДлинаВремени);
            Часы = Лев(ТолькоВремя,2);
            Минуты = Сред(ТолькоВремя,4,2);
            Секунды = Сред(ТолькоВремя,7,2);

            // Дыделим добавку часового пояса
            если СимвZ>0 тогда
                ДобавкаЧасов = 0;
                ДобавкаМинут = 0;
            иначеесли СимвПлюс>0 тогда
                ДобавкаЧасов = ПроверкаЧисло(Сред(СтрокаДаты,СимвПлюс+12,2));
                ДобавкаМинут = ПроверкаЧисло(Сред(СтрокаДаты,СимвПлюс+15,2));
            иначе
                ДобавкаЧасов = -ПроверкаЧисло(Сред(СтрокаДаты,СимвМинус+12,2));
                ДобавкаМинут = -ПроверкаЧисло(Сред(СтрокаДаты,СимвМинус+15,2));
            конецесли;

            ДатаЗнч = Дата(ТолькоДата+Часы+Минуты+Секунды);
            ДатаЗнч = ДатаЗнч + (ДобавкаМинут*60 + ДобавкаЧасов*60*60);
            возврат ДатаЗнч;

        иначе
            // Пробуем формат GNU
            // Сначала разобъем на блоки по пробелу
            МассивБлоков = новый Массив;
            ИщемНачало = истина;
            ТекБлок = "";
            СтрокаДаты = нрег(СтрокаДаты);
            Для НомерСимволаСтроки=1 по СтрДлина(СтрокаДаты) цикл
                ТекСимвол =  Сред(СтрокаДаты,НомерСимволаСтроки,1);
                если Не (ТекСимвол=" " или ТекСимвол=",") тогда
                    ТекБлок = ТекБлок + ТекСимвол;
                    ИщемНачало = ложь;
                    продолжить;
                иначеесли ИщемНачало тогда
                    продолжить;
                иначе
                    МассивБлоков.Добавить(ТекБлок);
                    ТекБлок = "";
                    ИщемНачало = истина;
                конецесли;
            конеццикла;
            если Не ИщемНачало тогда
                МассивБлоков.Добавить(ТекБлок);
            конецесли;
            // Теперь МассивБлоков содержит блоки строки даты

            // Добавим литералы днейнедели и месяце (можно добавлять еще языки)
            Мес = новый Соответствие;
            Мес.Вставить("jan",1);
            Мес.Вставить("feb",2);
            Мес.Вставить("mar",3);
            Мес.Вставить("apr",4);
            Мес.Вставить("may",5);
            Мес.Вставить("jun",6);
            Мес.Вставить("jul",7);
            Мес.Вставить("aug",8);
            Мес.Вставить("sep",9);
            Мес.Вставить("sept",9);
            Мес.Вставить("oct",10);
            Мес.Вставить("nov",11);
            Мес.Вставить("dec",12);

            Мес.Вставить("jan.",1);
            Мес.Вставить("feb.",2);
            Мес.Вставить("mar.",3);
            Мес.Вставить("apr.",4);
            Мес.Вставить("may.",5);
            Мес.Вставить("jun.",6);
            Мес.Вставить("jul.",7);
            Мес.Вставить("aug.",8);
            Мес.Вставить("sep.",9);
            Мес.Вставить("sept.",9);
            Мес.Вставить("oct.",10);
            Мес.Вставить("nov.",11);
            Мес.Вставить("dec.",12);

            Мес.Вставить("january",1);
            Мес.Вставить("february",2);
            Мес.Вставить("febr",2);
            Мес.Вставить("march",3);
            Мес.Вставить("april",4);
            Мес.Вставить("may",5);
            Мес.Вставить("june",6);
            Мес.Вставить("july",7);
            Мес.Вставить("august",8);
            Мес.Вставить("september",9);
            Мес.Вставить("sept",9);
            Мес.Вставить("october",10);
            Мес.Вставить("november",11);
            Мес.Вставить("december",12);

            Мес.Вставить("январь",1);
            Мес.Вставить("февраль",2);
            Мес.Вставить("март",3);
            Мес.Вставить("апрель",4);
            Мес.Вставить("май",5);
            Мес.Вставить("июнь",6);
            Мес.Вставить("июль",7);
            Мес.Вставить("август",8);
            Мес.Вставить("сентябрь",9);
            Мес.Вставить("октябрь",10);
            Мес.Вставить("ноябрь",11);
            Мес.Вставить("декабрь",12);

            Мес.Вставить("янв",1);
            Мес.Вставить("фев",2);
            Мес.Вставить("мар",3);
            Мес.Вставить("апр",4);
            Мес.Вставить("май",5);
            Мес.Вставить("июн",6);
            Мес.Вставить("июл",7);
            Мес.Вставить("авг",8);
            Мес.Вставить("сен",9);
            Мес.Вставить("окт",10);
            Мес.Вставить("ноя",11);
            Мес.Вставить("дек",12);

            Мес.Вставить("янв.",1);
            Мес.Вставить("фев.",2);
            Мес.Вставить("мар.",3);
            Мес.Вставить("апр.",4);
            Мес.Вставить("май.",5);
            Мес.Вставить("июн.",6);
            Мес.Вставить("июл.",7);
            Мес.Вставить("авг.",8);
            Мес.Вставить("сен.",9);
            Мес.Вставить("окт.",10);
            Мес.Вставить("ноя.",11);
            Мес.Вставить("дек.",12);


            ДНед = новый Массив;
            ДНед.Добавить("monday");
            ДНед.Добавить("tuesday");
            ДНед.Добавить("wednesday");
            ДНед.Добавить("thursday");
            ДНед.Добавить("friday");
            ДНед.Добавить("saturday");
            ДНед.Добавить("sunday");
            ДНед.Добавить("mon");
            ДНед.Добавить("tue");
            ДНед.Добавить("wed");
            ДНед.Добавить("thu");
            ДНед.Добавить("fri");
            ДНед.Добавить("sat");
            ДНед.Добавить("sun");


            ДНед.Добавить("понедельник");
            ДНед.Добавить("вторник");
            ДНед.Добавить("среда");
            ДНед.Добавить("четверг");
            ДНед.Добавить("пятница");
            ДНед.Добавить("суббота");
            ДНед.Добавить("воскресенье");
            ДНед.Добавить("пн");
            ДНед.Добавить("вт");
            ДНед.Добавить("ср");
            ДНед.Добавить("чт");
            ДНед.Добавить("пт");
            ДНед.Добавить("сб");
            ДНед.Добавить("вс");

            // Текущие данные
            День = неопределено;
            Месяц = неопределено;
            Год = неопределено;
            Часов = неопределено;
            Минут = неопределено;
            Секунд = неопределено;

            ЗнакДобавки = 1;
            ДобавкаЧасов = неопределено;
            ДобавкаМинут = неопределено;
            ЧасовойПояс = неопределено;

            БлокВремени = неопределено;

            БлокВремениСЧасовымПоясом = неопределено;
            БлокДатыСРазделителем = неопределено;

            ЧислаХ = новый массив; // для неопределенных числовых значений

            Для каждого Блок из МассивБлоков цикл
                если Найти(Блок,":")>0 и Найти(Блок,"+")=0 и Найти(Блок,"-")=0 тогда
                    // Это блок времени (исключили часовой пояс вида +hh:mm и -hh:mm)
                    // 20:02:00.000000
                    // 20:02
                    // 8:02pm
                    БлокВремени = Блок;
                иначеесли ДНед.Найти(Блок)<>неопределено тогда
                    // Это блок дня недели - просто опускаем (его необходимо исключить, чтобы не мешал)
                    //продолжить;
                иначеесли isset(Мес[Блок]) тогда
                    // Нашли месяц
                    Месяц = Мес[Блок];
                    // продолжить;
                иначеесли Найти(Блок, "gmt")>0 или Найти(Блок, "z")>0 или Найти(Блок, "utc")>0 тогда
                    // Нашли блок часового пояса для варианто UTC, UTC+hhmm, UTC-hh:mm
                    ЧасовойПояс = Блок;
                иначеесли Лев(Блок,1) = "-" или Лев(Блок,1) = "+" и
                    ПроверкаЧисло(СтрЗаменить(Блок,":","")<>неопределено) тогда
                    // Это должен быть только часовой пояс  вида +hhmm, -hhmm, +hh:mm, -hh:mm
                    ЧасовойПояс = "" + ЧасовойПояс + Блок;
                иначеесли Найти(Блок,":")>0 и (Найти(Блок, "-")>0 или Найти(Блок, "+")>0) тогда
                    // Это время вместе с добавкой вида 20:02-0500 # In EST (U.S. Eastern Standard Time).
                    БлокВремениСЧасовымПоясом = Блок;
                    если Найти(БлокВремениСЧасовымПоясом,"-") тогда
                        ЗнакДобавки = -1;
                    конецесли;
                    МассивВремениИДобавки = split("+-",БлокВремениСЧасовымПоясом);
                    БлокВремени = МассивВремениИДобавки[0];
                    ЧасовойПояс = "" + ?(ЗнакДобавки>0,"+","-")+МассивВремениИДобавки[1];

                иначеесли (Найти(Блок,"-")>0 и ПроверкаЧисло(СтрЗаменить(Блок,"-",""))<>неопределено)
                    или (Найти(Блок,"/")>0 и ПроверкаЧисло(СтрЗаменить(Блок,"/",""))<>неопределено)
                    или (Найти(Блок,"\")>0 и ПроверкаЧисло(СтрЗаменить(Блок,"\",""))<>неопределено)
                    или (Найти(Блок,".")>0 и ПроверкаЧисло(СтрЗаменить(Блок,".",""))<>неопределено) тогда
                    // Это дата формата
                    //                  1972-09-24     # ISO 8601.
                    //72-9-24        # Assume 19xx for 69 through 99,
                    //             # 20xx for 00 through 68.
                    //72-09-24       # Leading zeros are ignored.
                    //9/24/72        # Common U.S. writing.
                    // 01.05.02  -  тоже возможно проверить
                    // 9/24 - без года - день в конце, но с разделителем


                    БлокДатыСРазделителем = Блок;
                иначеесли ПроверкаЧисло(Блок)<>неопределено тогда
                    // остались день месц год - день должен быть первым при этом
                    // если месяц числовой то порядок следования год-месяц-день или месяц-день
                    // а если прописью то допустимы
                    // day month year
                    // day month
                    // month day year
                    // day-month-year
                    //
                    //Or, omitting the year:
                    //  month day
                    // С этим разберемся потом
                    ЧислаХ.Добавить(Число(Блок));
                иначеесли (Найти(Блок,"-")>0)
                    или (Найти(Блок,"/")>0)
                    или (Найти(Блок,"\")>0)
                    или (Найти(Блок,".")>0)  тогда
                    // может такое  24-sep-72 24/sep/72 24\sep\72 24.sep.72
                    БлокДатыСРазделителем = Блок;
                конецесли;
            КонецЦикла;
            // Теперь можно смотреть что есть.

            // Сначала дата
            если БлокДатыСРазделителем<>неопределено тогда
                если (Найти(Блок,"/")>0 и ПроверкаЧисло(СтрЗаменить(Блок,"/",""))<>неопределено) тогда
                    // Амеркианский стандарт 9/24/72        # Common U.S. writing.

                    МассивДаты = split("/.\", БлокДатыСРазделителем);
                    КвоЭл = МассивДаты.Количество();
                    если КвоЭл>2 тогда
                        Год = МассивДаты[2];
                        Месяц = МассивДаты[0];
                        День = МассивДаты[1];
                    иначе
                        Год = Год(ТекущаяДата());
                        Месяц = МассивДаты[0];
                        День = МассивДаты[1];
                    конецесли;
                иначе
                МассивДаты = split("-.", БлокДатыСРазделителем);
                если МассивДаты.Количество()>2 тогда
                    // Дата с годом
                    если ПроверкаЧисло(МассивДаты[1])=неопределено тогда
                        //месяц прописью -формат день-месц-год
                        Месяц=Мес[МассивДаты[1]];
                        Год = МассивДаты[2];
                        День = МассивДаты[0];
                    иначе
                        // месяц числом - формат год-месяц-день
                        Год = МассивДаты[0];
                        Месяц = МассивДаты[1];
                        День = МассивДаты[2];
                    конецесли;
                иначе
                    // Дата без года
                    если isset(Мес[МассивДаты[1]]) тогда
                        // месяц прописью на втором месте - на первом день
                        Месяц = Мес[МассивДаты[1]];
                        День = МассивДаты[0];
                        Год = Год(ТекущаяДата());
                    иначеесли isset(Мес[МассивДаты[0]])  тогда
                        Месяц = Мес[МассивДаты[0]];
                        День = МассивДаты[1];
                        Год = Год(ТекущаяДата());
                    иначе // месяц числом без года
                        Год = Год(ТекущаяДата());
                        Месяц = МассивДаты[0];
                        День = МассивДаты[1];
                    КонецЕсли;
                конецесли;
             конецесли;
            иначеесли Месяц<>Неопределено тогда
                // Месяц прописью - ищем день и год в ЧислаХ
                День = ЧислаХ[0];
                если ЧислаХ.Количество()>1 тогда
                    Год = ЧислаХ[1];
                иначе
                    Год = Год(ТекущаяДата());
                конецесли;
            иначе // День месяц и годв числаХ
                КвоЧисел =  ЧислаХ.Количество();
                если КвоЧисел>2 тогда
                    // Год месяц день - хотя такого недолжно быть
                    Год = ЧислаХ[0];
                    Месяц = ЧислаХ[1];
                    День = ЧислаХ[2];
                иначеесли КвоЧисел>1 тогда
                    // Год опущен Месяц - день
                    Год = Год(ТекущаяДата());
                    Месяц = ЧислаХ[0];
                    День = ЧислаХ[1];
                иначеесли КвоЧисел>0 тогда
                    // Опущен год и месяц - тоже не должно быть
                    День = ЧислаХ[0];
                    Год = Год(ТекущаяДата());
                    Месяц = Месяц(ТекущаяДата());
                иначе
                    // Опущена вся дата
                    День = День(ТекущаяДата());
                    Год = Год(ТекущаяДата());
                    Месяц = Месяц(ТекущаяДата());
                конецесли;
            КонецЕсли;

            // Теперь время
            если БлокВремени<>Неопределено тогда
                БлокВремени = СтрЗаменить(БлокВремени, "z", "");
                БлокВремени = СтрЗаменить(БлокВремени, "gmt", "");
                БлокВремени = СтрЗаменить(БлокВремени, "utc", "");

                МассивВремени = split(":",БлокВремени,3);
                КвоЭлементов = МассивВремени.Количество();
                если КвоЭлементов>2 тогда
                    // часы минуты секунды
                    Часов = МассивВремени[0];
                    СекТекст = Сред(МассивВремени[2],3,4);
                    если Найти(СекТекст,"am")>0 или Найти(СекТекст,"a.m.")>0 тогда
                        Часов = ?(Число(Часов)=12, 0, Число(Часов));
                    иначеесли Найти(СекТекст,"pm")>0 или Найти(СекТекст,"p.m.")>0 тогда
                        Часов = ?(Число(Часов)=12, 12, Число(Часов)+12);
                    конецесли;
                        Минут = МассивВремени[1];
                        Секунд = Лев(МассивВремени[2],2);

                иначеесли КвоЭлементов>1 тогда
                    Часов =  МассивВремени[0];
                    СекТекст = Сред(МассивВремени[1],3,4);
                    если Найти(СекТекст,"am")>0 или Найти(СекТекст,"a.m.")>0 тогда
                        Часов = ?(Число(Часов)=12, 0, Число(Часов));
                    иначеесли Найти(СекТекст,"pm")>0 или Найти(СекТекст,"p.m.")>0 тогда
                        Часов = ?(Число(Часов)=12, 12, Число(Часов)+12);
                    конецесли;
                    Минут = Лев(МассивВремени[1],2);
                    Секунд = 0;
                иначе
                    // только часы - не может быть, но пробуем
                    Часов = МассивВремени[0];
                    Минут = 0;
                    Секунд = 0;
                конецесли;
            иначе
                // время опущено - ставим 0
                Часов = 0;
                Минут = 0;
                Секунд = 0;

            конецесли;

            // Теперь часовой пояс
            ЧасовойПояс = СтрЗаменить(ЧасовойПояс,"gmt","");
            ЧасовойПояс = СтрЗаменить(ЧасовойПояс,"utc","");
            ЧасовойПояс = СтрЗаменить(ЧасовойПояс,"z","");
            ЧасовойПояс = СтрЗаменить(ЧасовойПояс,":","");
            Если СтрДлина(ЧасовойПояс)<5 тогда
                // неизвестный формат пояса
                ДобавкаЧасов = 0;
                ДобавкаМинут = 0;
            иначе
                если Лев(ЧасовойПояс,1)="+" тогда
                    ЗнакДобавки = 1;
                иначеесли Лев(ЧасовойПояс,1)="-" тогда
                    ЗнакДобавки = -1;
                иначе
                    // неверный формат добавки
                    ДобавкаЧасов = 0;
                    ДобавкаМинут = 0;
                конецесли;
                ДобавкаЧасов = Число(Сред(ЧасовойПояс,2,2))*ЗнакДобавки;
                ДобавкаМинут = Число(Сред(ЧасовойПояс,4,2))*ЗнакДобавки;
            конецесли;

            если Число(год)<=68 тогда
                Год = Число(Год) + 2000;
            иначеесли Число(год)<100 тогда
                Год = Число(Год) + 1900;
            конецесли;
            ДатаЗнч = Дата(Год,Месяц,День,Часов,Минут,Секунд);
            ДатаЗнч = ДатаЗнч + (ДобавкаМинут*60 + ДобавкаЧасов*60*60);
            возврат ДатаЗнч;

    //where:
    //   YYYY = four-digit year
    //   MM   = two-digit month (01=January, etc.)
    //   DD   = two-digit day of month (01 through 31)
    //   hh   = two digits of hour (00 through 23) (am/pm NOT allowed)
    //   mm   = two digits of minute (00 through 59)
    //   ss   = two digits of second (00 through 59)
    //   s    = one or more digits representing a decimal fraction of a second
    //   TZD  = time zone designator (Z or +hh:mm or -hh:mm)

    //This profile does not specify how many digits may be used to represent the decimal fraction of a second. An adopting standard that permits fractions of a second must specify both the minimum number of digits (a number greater than or equal to one) and the maximum number of digits (the maximum may be stated to be "unlimited").

    //This profile defines two ways of handling time zone offsets:
    //Times are expressed in UTC (Coordinated Universal Time), with a special UTC designator ("Z").
    //Times are expressed in local time, together with a time zone offset in hours and minutes. A time zone offset of "+hh:mm" indicates that the date/time uses a local time zone which is "hh" hours and "mm" minutes ahead of UTC. A time zone offset of "-hh:mm" indicates that the date/time uses a local time zone which is "hh" hours and "mm" minutes behind UTC.

    //A standard referencing this profile should permit one or both of these ways of handling time zone offsets.
конецесли;
 возврат неопределено;
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////
// Функция разбивает строку по разделителям, лимит определяет максимальное количество слов
// аналог split в PHP
Функция split(СимволыРазделители, строка, лимит = неопределено) экспорт

НоваяСтрока = Строка;
МассивСлов = новый Массив;
ИщемНачало = истина;
ТекСлово = "";

Для НомерСимволаСтроки=1 по СтрДлина(Строка) цикл
    ТекСимвол =  Сред(Строка,НомерСимволаСтроки,1);
    если Найти(СимволыРазделители, ТекСимвол)=0  тогда
        ТекСлово = ТекСлово + ТекСимвол;
        ИщемНачало = ложь;
        продолжить;
    иначеесли ИщемНачало тогда
        МассивСлов.Добавить("");
        если МассивСлов.Количество()=лимит тогда
            возврат МассивСлов;
        конецесли;
        продолжить;
    иначе
        МассивСлов.Добавить(ТекСлово);
        если МассивСлов.Количество()=лимит тогда
            возврат МассивСлов;
        конецесли;
        ТекСлово = "";
        ИщемНачало = истина;
    конецесли;
конеццикла;
если Не ИщемНачало тогда
    МассивСлов.Добавить(ТекСлово);
конецесли;
возврат МассивСлов;
конецфункции

Функция isset(Парам)
    возврат ?(Парам=неопределено, ложь,истина);
конецфункции

Функция ПроверкаЧисло(Чс)
    попытка
        Ло = Число(Чс);
    исключение
        возврат неопределено;
    конецпопытки;
    возврат Ло;
КонецФункции