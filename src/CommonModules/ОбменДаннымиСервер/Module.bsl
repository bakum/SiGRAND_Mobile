Функция ЗаписатьИзмененияВЦентральнуюБазу() Экспорт
	Рез = Ложь;
	Если ЗаписатьИзмененияКонтрагентов() И
		ЗаписатьИзмененияКонтактнойИнформации() И
		ЗаписатьИзмененияЗаказов() Тогда
		Рез = Истина;
	КонецЕсли;
	Возврат Рез;
КонецФункции

Процедура СброситьВсеИзмененияНаСервере() Экспорт
	Узел = ПланыОбмена.ОбменСОсновнойБазой.НайтиПоКоду("ORA");
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел);
КонецПроцедуры

Функция ЗаписатьИзмененияКонтрагентов()
	Результат = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрагентыИзменения.Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты.Изменения КАК КонтрагентыИзменения
	               |ГДЕ
	               |	КонтрагентыИзменения.Узел = &НужныйУзелПланаОбмена";
	Узел = ПланыОбмена.ОбменСОсновнойБазой.НайтиПоКоду("ORA");
	Запрос.УстановитьПараметр("НужныйУзелПланаОбмена", Узел);
	Р = Запрос.Выполнить();
	Если Р.Пустой() Тогда
		Результат = Истина;
	КонецЕсли;	
	Рез = Р.Выгрузить();
	ЗаписьКонтрагент = Новый Соответствие;
	Для Каждого Контраг Из Рез Цикл
		Кон = Контраг.Ссылка;
		ЗаписьКонтрагент.Вставить("fullname",Кон.Наименование);
		ЗаписьКонтрагент.Вставить("id",Кон.Ид);
		Если СохранитьКонтрагентаВБазу(ЗаписьКонтрагент) Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Кон);
			Результат = Истина;
		КонецЕсли;	
	КонецЦикла;
	Возврат Результат;
КонецФункции	

Функция ЗаписатьИзмененияКонтактнойИнформации()
	Результат = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформацияИзменения.Ссылка
	               |ИЗ
	               |	Справочник.КонтактнаяИнформация.Изменения КАК КонтактнаяИнформацияИзменения
	               |ГДЕ
	               |	КонтактнаяИнформацияИзменения.Узел = &НужныйУзелПланаОбмена";
	Узел = ПланыОбмена.ОбменСОсновнойБазой.НайтиПоКоду("ORA");
	Запрос.УстановитьПараметр("НужныйУзелПланаОбмена", Узел);
	Р = Запрос.Выполнить();
	Если Р.Пустой() Тогда
		Результат = Истина;
	КонецЕсли;	
	Рез = Р.Выгрузить();
	ЗаписьКонтакт = Новый Соответствие;
	Для Каждого Контакт Из Рез Цикл
		Кон = Контакт.Ссылка;
		ЗаписьКонтакт.Вставить("adress",Кон.Адрес);
		ЗаписьКонтакт.Вставить("phone",Кон.Телефон);
		ЗаписьКонтакт.Вставить("email",Кон.ЭлектроннаяПочта);
		ЗаписьКонтакт.Вставить("id",Кон.Ид);
		Если СохранитьКонтактнуюИнформациюВБазу(ЗаписьКонтакт) Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Кон);
			Результат = Истина;
		КонецЕсли;	
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЗаписатьИзмененияЗаказов()
	Результат = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыИзменения.Ссылка
	               |ИЗ
	               |	Документ.Заказы.Изменения КАК ЗаказыИзменения
	               |ГДЕ
	               |	ЗаказыИзменения.Узел = &НужныйУзелПланаОбмена";
	Узел = ПланыОбмена.ОбменСОсновнойБазой.НайтиПоКоду("ORA");
	Запрос.УстановитьПараметр("НужныйУзелПланаОбмена", Узел);
	Р = Запрос.Выполнить();
	Если Р.Пустой() Тогда
		Результат = Истина;
	КонецЕсли;	
	Рез = Р.Выгрузить();
	ЗаписьКонтакт = Новый Соответствие;
	Для Каждого Контакт Из Рез Цикл
		Кон = Контакт.Ссылка;
		ЗаписьКонтакт.Вставить("discription",Кон.Комментарий);
		ЗаписьКонтакт.Вставить("zamer_id",Кон.Замерщик.Ид);
		ЗаписьКонтакт.Вставить("status_id",Кон.Статус.Ид);
		ЗаписьКонтакт.Вставить("dat_complete",Формат(Кон.ДатаВыполнения, "ДФ=yyyy-MM-dd"));
		ЗаписьКонтакт.Вставить("id",Кон.Ид);
		Если СохранитьЗаказВБазу(ЗаписьКонтакт) Тогда
			Если ЗаписатьИзмененияОплатыЗаказа(Кон) Тогда
				Результат = Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
			Если ЗаписатьИзмененияУслугиЗаказа(Кон) Тогда
				Результат = Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
			Если ПровестиНаСервере(Кон.Ид) Тогда
				Результат = Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Кон);
		Иначе
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЗаписатьИзмененияОплатыЗаказа(Заказ)
	Результат = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыОплаты.Ссылка,
	               |	ЗаказыОплаты.ДатаОплаты,
	               |	ЗаказыОплаты.Ид,
	               |	ЗаказыОплаты.СуммаОплаты,
	               |	ЗаказыОплаты.Касса,
	               |	ЗаказыОплаты.Замерщик,
	               |	ЗаказыОплаты.Ссылка.Ид КАК ЗаказИд,
	               |	ЗаказыОплаты.ПользовательИд
	               |ИЗ
	               |	Документ.Заказы.Оплаты КАК ЗаказыОплаты
	               |ГДЕ
	               |	ЗаказыОплаты.Ссылка = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", Заказ);
	Р = Запрос.Выполнить();
	Если Р.Пустой() Тогда
		Результат = Истина;
	КонецЕсли;	
	Рез = Р.Выгрузить();
	ЗаписьКонтакт = Новый Соответствие;
	Для Каждого Контакт Из Рез Цикл
		//Кон = Контакт.Ссылка;
		ЗаписьКонтакт.Вставить("p_order_id",Контакт.ЗаказИд);
		ЗаписьКонтакт.Вставить("p_sum",Контакт.СуммаОплаты);
		ЗаписьКонтакт.Вставить("p_user_id",Контакт.ПользовательИд);
		ЗаписьКонтакт.Вставить("p_dat",Формат(Контакт.ДатаОплаты, "ДФ=yyyy-MM-dd"));
		ЗаписьКонтакт.Вставить("p_zamer_id",Контакт.Замерщик.Ид);
		ЗаписьКонтакт.Вставить("p_kassa_id",Контакт.Касса.Ид);
		ЗаписьКонтакт.Вставить("id",Контакт.Ид);
		Если ЗначениеЗаполнено(Контакт.Ид) Тогда
			Получилось = ОбновитьОплатуВБазеДанных(ЗаписьКонтакт);
		Иначе
			Получилось = ДобавитьОплатуВБазуДанных(ЗаписьКонтакт);
		КонецЕсли;	
		Если Получилось Тогда
			Результат = Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;
	Возврат Результат;	
КонецФункции	

Функция ЗаписатьИзмененияУслугиЗаказа(Заказ)
	Результат = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыУслуги.Ссылка,
	               |	ЗаказыУслуги.ВидРабот,
	               |	ЗаказыУслуги.Работа,
	               |	ЗаказыУслуги.ЕдИзм,
	               |	ЗаказыУслуги.Количество,
	               |	ЗаказыУслуги.Цена,
	               |	ЗаказыУслуги.Сумма,
	               |	ЗаказыУслуги.ДопРаботы,
	               |	ЗаказыУслуги.ДопСумма,
	               |	ЗаказыУслуги.Замерщик,
	               |	ЗаказыУслуги.Ид
	               |ИЗ
	               |	Документ.Заказы.Услуги КАК ЗаказыУслуги
	               |ГДЕ
	               |	ЗаказыУслуги.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Заказ);
	Р = Запрос.Выполнить();
	Если Р.Пустой() Тогда
		Результат = Истина;
	КонецЕсли;	
	Рез = Р.Выгрузить();
	ЗаписьКонтакт = Новый Соответствие;
	Для Каждого Контакт Из Рез Цикл
		//Кон = Контакт.Ссылка;
		ЗаписьКонтакт.Вставить("p_order_id",Контакт.Ссылка.Ид);
		ЗаписьКонтакт.Вставить("p_price",СтрЗаменить(Контакт.Цена,Символы.НПП,""));
		ЗаписьКонтакт.Вставить("p_summ",СтрЗаменить(Контакт.Сумма,Символы.НПП,""));
		ЗаписьКонтакт.Вставить("p_nom_id",Контакт.Работа.Ид);
		ЗаписьКонтакт.Вставить("p_sotr_id",Контакт.Замерщик.Ид);
		ЗаписьКонтакт.Вставить("p_group_id",Контакт.ВидРабот.Ид);
		ЗаписьКонтакт.Вставить("p_measure_id",Контакт.ЕдИзм.Ид);
		ЗаписьКонтакт.Вставить("p_quantity",СтрЗаменить(Контакт.Количество,Символы.НПП,""));
		ЗаписьКонтакт.Вставить("p_add_work",Контакт.ДопРаботы);
		ЗаписьКонтакт.Вставить("p_price_add",СтрЗаменить(Контакт.ДопСумма,Символы.НПП,""));
		ЗаписьКонтакт.Вставить("p_dat_complete",Формат(Контакт.Ссылка.ДатаВыполнения, "ДФ=yyyy-MM-dd"));
		ЗаписьКонтакт.Вставить("p_dat_to_pay",Формат(Контакт.Ссылка.ДатаЗамера, "ДФ=yyyy-MM-dd"));
		ЗаписьКонтакт.Вставить("p_id",Контакт.Ид);
		Если ЗначениеЗаполнено(Контакт.Ид) Тогда
			Получилось = ОбновитьУслугуВБазеДанных(ЗаписьКонтакт);
		Иначе
			Получилось = ДобавитьУслугуВБазеДанных(ЗаписьКонтакт);
		КонецЕсли;	
		Если Получилось Тогда
			Результат = Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;
	Возврат Результат;	
			   
КонецФункции

Функция ОбновитьУслугуВБазеДанных(ЗаписьКонтакт)
	Рез = Ложь;
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select soap.update_tp_uslugi('"+ЗаписьКонтакт["p_id"]+"','"+
		ЗаписьКонтакт["p_price"]+"','"+
		ЗаписьКонтакт["p_summ"]+"','"+ЗаписьКонтакт["p_nom_id"]+
		"','"+ЗаписьКонтакт["p_sotr_id"]+"','"+ЗаписьКонтакт["p_group_id"]+
		"','"+ЗаписьКонтакт["p_measure_id"]+"','"+ЗаписьКонтакт["p_quantity"]+
		"','"+ЗаписьКонтакт["p_add_work"]+"','"+ЗаписьКонтакт["p_price_add"]+
		"', to_date('"+ЗаписьКонтакт["p_dat_complete"]+"','YYYY-MM-dd'),"+
		" to_date('"+ЗаписьКонтакт["p_dat_to_pay"]+"','YYYY-MM-dd')"+") enbl from dual";
	ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Рез = Ложь;
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьСтатуса = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:ENBL",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			Разрешено = Число(ЭлементПоиска.ТекстовоеСодержимое);
			Рез = Разрешено = 1;	
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;

КонецФункции

Функция ДобавитьУслугуВБазеДанных(ЗаписьКонтакт)
	Рез = Ложь;
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select soap.create_tp_uslugi('"+ЗаписьКонтакт["p_order_id"]+"','"+
		ЗаписьКонтакт["p_price"]+"','"+
		ЗаписьКонтакт["p_summ"]+"','"+ЗаписьКонтакт["p_nom_id"]+
		"','"+ЗаписьКонтакт["p_sotr_id"]+"','"+ЗаписьКонтакт["p_group_id"]+
		"','"+ЗаписьКонтакт["p_measure_id"]+"','"+ЗаписьКонтакт["p_quantity"]+
		"','"+ЗаписьКонтакт["p_add_work"]+"','"+ЗаписьКонтакт["p_price_add"]+
		"', to_date('"+ЗаписьКонтакт["p_dat_complete"]+"','YYYY-MM-dd'),"+
		" to_date('"+ЗаписьКонтакт["p_dat_to_pay"]+"','YYYY-MM-dd')"+") enbl from dual";
	ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Рез = Ложь;
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьСтатуса = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:ENBL",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			Разрешено = Число(ЭлементПоиска.ТекстовоеСодержимое);
			Рез = Разрешено = 1;	
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;

КонецФункции

Функция ОбновитьОплатуВБазеДанных(ЗаписьКонтакт)
	Рез = Ложь;
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select soap.update_tp_oplaty('"+ЗаписьКонтакт["id"]+
		"', to_date('"+ЗаписьКонтакт["p_dat"]+"','YYYY-MM-dd'),'"+
		СтрЗаменить(ЗаписьКонтакт["p_sum"],Символы.НПП,"")+"','"+ЗаписьКонтакт["p_user_id"]+
		"','"+ЗаписьКонтакт["p_zamer_id"]+"','"+ЗаписьКонтакт["p_kassa_id"]+"') enbl from dual";
	ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Рез = Ложь;
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьСтатуса = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:ENBL",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			Разрешено = Число(ЭлементПоиска.ТекстовоеСодержимое);
			Рез = Разрешено = 1;	
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;

КонецФункции

Функция ПровестиНаСервере(Ид)
	Рез = Ложь;
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select soap.move_order('"+Ид+"') enbl from dual";
	ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Рез = Ложь;
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьСтатуса = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:ENBL",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			Разрешено = Число(ЭлементПоиска.ТекстовоеСодержимое);
			Рез = Разрешено = 1;	
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;

КонецФункции


Функция ДобавитьОплатуВБазуДанных(ЗаписьКонтакт)
	Рез = Ложь;
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select soap.create_tp_oplaty('"+ЗаписьКонтакт["p_order_id"]+
		"', to_date('"+ЗаписьКонтакт["p_dat"]+"','YYYY-MM-dd'),'"+
		СтрЗаменить(ЗаписьКонтакт["p_sum"],Символы.НПП,"")+"','"+ЗаписьКонтакт["p_user_id"]+
		"','"+ЗаписьКонтакт["p_zamer_id"]+"','"+ЗаписьКонтакт["p_kassa_id"]+"') enbl from dual";
	ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Рез = Ложь;
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьСтатуса = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:ENBL",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			Разрешено = Число(ЭлементПоиска.ТекстовоеСодержимое);
			Рез = Разрешено = 1;	
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции

Функция ВыполнитьСинхронизациюСтатусов(ЗаписьСтатуса) Экспорт
	Рез = Ложь;
	Поиск = Справочники.СтатусыЗаказов.НайтиПоРеквизиту("Ид",ЗаписьСтатуса["id"]);
	Если Поиск.Пустая() Тогда
		Поиск = Справочники.СтатусыЗаказов.СоздатьЭлемент();
		Поиск.УстановитьНовыйКод();
	Иначе
		Поиск = Поиск.ПолучитьОбъект();
	КонецЕсли;
	Поиск.Ид = ЗаписьСтатуса["id"];
	Поиск.Наименование = ЗаписьСтатуса["fullname"];
	Поиск.НаименованиеПолное = ЗаписьСтатуса["name"];
	
	Если Поиск.Наименование = "Замер" Тогда
		Поиск.ИмяПредопределенныхДанных  = "Замер";
	КонецЕсли;
	Если Поиск.Наименование = "Новый" Тогда
		Поиск.ИмяПредопределенныхДанных  = "Новый";
	КонецЕсли;
	
	Попытка
		Поиск.Записать();
		Рез = Истина;
	Исключение
	КонецПопытки;
	
	Возврат Рез;
КонецФункции

Функция ВыполнитьСинхронизациюЕдИзмерения(ЗаписьЕдиницы) Экспорт
	Рез = Ложь;
	Поиск = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("Ид",ЗаписьЕдиницы["id"]);
	Если Поиск.Пустая() Тогда
		Поиск = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		Поиск.УстановитьНовыйКод();
	Иначе
		Поиск = Поиск.ПолучитьОбъект();
	КонецЕсли;
	Поиск.Наименование = ЗаписьЕдиницы["fullname"];
	Поиск.Ид = ЗаписьЕдиницы["id"];
	
	Попытка
		Поиск.Записать();
		Рез = Истина;
	Исключение
	КонецПопытки;

	Возврат Рез;

КонецФункции	

Функция ВыполнитьСинхронизациюНоменклатуры(ЗаписьНоменклатуры) Экспорт
	Рез = Ложь;
	Ном = Справочники.Номенклатура.НайтиПоРеквизиту("Ид",ЗаписьНоменклатуры["id"]);
	Если Ном.Пустая() Тогда
		Если ЗаписьНоменклатуры["isGroup"] = 1 Тогда
			Ном = Справочники.Номенклатура.СоздатьГруппу();
		Иначе
			Ном = Справочники.Номенклатура.СоздатьЭлемент();
		КонецЕсли;
		Ном.УстановитьНовыйКод();
	Иначе
		Ном = Ном.ПолучитьОбъект();
	КонецЕсли;
	
	Ном.Наименование = ЗаписьНоменклатуры["fullname"];
	Если Ном.Наименование = "Услуги" Тогда
		Ном.ИмяПредопределенныхДанных  = "Услуги";
	КонецЕсли;	
	Ном.Ид = ЗаписьНоменклатуры["id"];
	Ном.РодительИД = ЗаписьНоменклатуры["parentId"];
	Попытка
		Ном.Записать();
		Рез = Истина;
	Исключение
	КонецПопытки;

	Возврат Рез;
КонецФункции

Функция ВыполнитьСинхронизациюЦены(ЗаписьЦены) Экспорт
	Рез = Ложь;
	Цена = Справочники.Номенклатура.НайтиПоРеквизиту("Ид",ЗаписьЦены["nomId"]);
	Если НЕ Цена.Пустая() Тогда
			Цена = Цена.ПолучитьОбъект();
			//Статус.УстановитьНовыйКод();
			//Статус.Наименование = ЗаписьСтатуса["name"];
			Цена.ЦенаТовара = ЗаписьЦены["priceGoods"];
			Цена.ЦенаУслуги = ЗаписьЦены["priceUsl"];
			Цена.ЕдИзм = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("Ид",ЗаписьЦены["measureId"]);
			Попытка
				Цена.Записать();
				Рез = Истина;
			Исключение
			КонецПопытки;	
	КонецЕсли;
	Возврат Рез;
КонецФункции

Функция ВыполнитьСинхронизациюГорода(ЗаписьГорода) Экспорт
	Рез = Ложь;
	Поиск = Справочники.Города.НайтиПоРеквизиту("Ид",ЗаписьГорода["id"]);
	Если Поиск.Пустая() Тогда
		Поиск = Справочники.Города.СоздатьЭлемент();
		Поиск.УстановитьНовыйКод();
	Иначе
		Поиск = Поиск.ПолучитьОбъект();
	КонецЕсли;
	Поиск.Наименование = ЗаписьГорода["fullname"];
	Поиск.Ид = ЗаписьГорода["id"];
	
	Попытка
		Поиск.Записать();
		Рез = Истина;
	Исключение
	КонецПопытки;

	Возврат Рез;
КонецФункции

Функция ВыполнитьСинхронизациюИнфоКарт(ЗаписьКарты) Экспорт
	Рез = Ложь;
	Поиск = Справочники.ИнформационныеКарты.НайтиПоРеквизиту("Ид",ЗаписьКарты["id"]);
	Если Поиск.Пустая() Тогда
		Поиск = Справочники.ИнформационныеКарты.СоздатьЭлемент();
		Поиск.УстановитьНовыйКод();
	Иначе
		Поиск = Поиск.ПолучитьОбъект();
	КонецЕсли;
	Поиск.Наименование = ЗаписьКарты["fullname"];
	Поиск.Ид = ЗаписьКарты["id"];
	Поиск.Сумма = ЗаписьКарты["summa"];
	
	Попытка
		Поиск.Записать();
		Рез = Истина;
	Исключение
	КонецПопытки;

	Возврат Рез;
КонецФункции


Процедура УтрястиИерархиюНоменклатуры() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Номенклатура
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура";
	Результат = Запрос.Выполнить().Выгрузить();			   
	
	Для Каждого Ном Из Результат Цикл
		Если ЗначениеЗаполнено(Ном.Номенклатура.РодительИД) Тогда
			Родитель = Справочники.Номенклатура.НайтиПоРеквизиту("Ид", Ном.Номенклатура.РодительИД);
			Если НЕ Родитель.Пустая() Тогда
				НомО = Ном.Номенклатура.ПолучитьОбъект();
				НомО.Родитель = Родитель;
				Попытка
					НомО.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Процедура ВыполнитьСинхронизациюНастроек(ЗаписьПользователя) Экспорт  
	Узел = ПланыОбмена.ОбменСОсновнойБазой.НайтиПоКоду("ORA");
	Поиск = Справочники.Контрагенты.НайтиПоРеквизиту("Ид", ЗаписьПользователя["id"]);
	Если Поиск.Пустая() Тогда
		Поиск = Справочники.Контрагенты.СоздатьЭлемент();
		Поиск.УстановитьНовыйКод();
	Иначе
		Поиск = Поиск.ПолучитьОбъект();
	КонецЕсли;
	Поиск.Наименование = ЗаписьПользователя["fullname"];
	Поиск.Ид = ЗаписьПользователя["id"];
	Поиск.РодительИд = ЗаписьПользователя["parentId"];
	Поиск.Покупатель = Булево(ЗаписьПользователя["isBuyer"]);
	Поиск.Поставщик = Булево(ЗаписьПользователя["isSupplier"]);
	Поиск.Замерщик = Булево(ЗаписьПользователя["isMeasurer"]);
	
	Попытка
		Поиск.Записать();
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Поиск.Ссылка);
	Исключение
		Возврат;
	КонецПопытки;
	
	МенеджерЗаписи = РегистрыСведений.НастройкиПользователя.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.Контрагент = Поиск.Ссылка;

	МенеджерЗаписи.Записать(Истина);

КонецПроцедуры

Процедура ВыполнитьСинхронизациюКонтрагента(ЗаписьПользователя) Экспорт
	Узел = ПланыОбмена.ОбменСОсновнойБазой.НайтиПоКоду("ORA");
	Поиск = Справочники.Контрагенты.НайтиПоРеквизиту("Ид", ЗаписьПользователя["id"]);
	Если Поиск.Пустая() Тогда
		Поиск = Справочники.Контрагенты.СоздатьЭлемент();
		Поиск.УстановитьНовыйКод();
	Иначе
		Поиск = Поиск.ПолучитьОбъект();
	КонецЕсли;
	Поиск.Наименование = ЗаписьПользователя["fullname"];
	Поиск.Ид = ЗаписьПользователя["id"];
	Поиск.РодительИд = ЗаписьПользователя["parentId"];
	Поиск.Покупатель = Булево(ЗаписьПользователя["isBuyer"]);
	Поиск.Поставщик = Булево(ЗаписьПользователя["isSupplier"]);
	Поиск.Замерщик = Булево(ЗаписьПользователя["isMeasurer"]);
	Поиск.Город = Справочники.Города.НайтиПоРеквизиту("Ид",ЗаписьПользователя["cityId"]);
	Поиск.Скидка = Справочники.ИнформационныеКарты.НайтиПоРеквизиту("Ид",ЗаписьПользователя["infocardId"]);
	
	Попытка
		Поиск.Записать();
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Поиск.Ссылка);
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ЗаписьПользователя["is_usersettings"] = 1 Тогда
		МенеджерЗаписи = РегистрыСведений.НастройкиПользователя.СоздатьМенеджерЗаписи();
	
		МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		МенеджерЗаписи.Контрагент = Поиск.Ссылка;

		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;

	
КонецПроцедуры

Процедура ВыполнитьСинхронизациюКонтактнойИнформации(ЗаписьИнформации) Экспорт
	Узел = ПланыОбмена.ОбменСОсновнойБазой.НайтиПоКоду("ORA");
	Поиск = Справочники.КонтактнаяИнформация.НайтиПоРеквизиту("Ид", ЗаписьИнформации["id"]);
	Если Поиск.Пустая() Тогда
		Поиск = Справочники.КонтактнаяИнформация.СоздатьЭлемент();
		Поиск.УстановитьНовыйКод();
	Иначе
		Поиск = Поиск.ПолучитьОбъект();
	КонецЕсли;
	КонРодитель = Справочники.Контрагенты.НайтиПоРеквизиту("Ид", ЗаписьИнформации["kontrag_id"]);
	Если КонРодитель.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	Поиск.Наименование = КонРодитель.Наименование;
	Поиск.Ид = ЗаписьИнформации["id"];
	Поиск.Адрес = ЗаписьИнформации["adress"];
	Поиск.ИдКонтрагента = ЗаписьИнформации["kontrag_id"];
	Поиск.Телефон = ЗаписьИнформации["phone"];
	Поиск.ЭлектроннаяПочта = ЗаписьИнформации["email"];
	Поиск.Владелец =  КонРодитель;
	Попытка
		Поиск.Записать();
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Поиск.Ссылка);
	Исключение
		Возврат;
	КонецПопытки;

КонецПроцедуры	

Процедура ВыполнитьСинхронизациюМенеджера(ЗаписьПользователя) Экспорт
	Поиск = Справочники.Менеджеры.НайтиПоРеквизиту("Ид", ЗаписьПользователя["id"]);
	Если Поиск.Пустая() Тогда
		Поиск = Справочники.Менеджеры.СоздатьЭлемент();
		Поиск.УстановитьНовыйКод();
	Иначе
		Поиск = Поиск.ПолучитьОбъект();
	КонецЕсли;
	Поиск.Наименование = ЗаписьПользователя["login"];
	Поиск.Ид = ЗаписьПользователя["id"];
	Поиск.НаименованиеПолное = ЗаписьПользователя["lastName"];	
	Попытка
		Поиск.Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьНастройкиРЕСТ() Экспорт
	Настройка = Справочники.НастройкиREST.Основная;
	Настройки = Новый Структура;
	Настройки.Вставить("АдресСервера",Настройка.АдресСервера);
	Настройки.Вставить("СистемныйПользователь",Настройка.СистемныйПользователь);
	Настройки.Вставить("СистемныйПароль",Настройка.СистемныйПароль);
	Возврат Настройки;
КонецФункции	

Процедура ВыполнитьСинхронизациюЗаказа(ЗаписьПользователя) Экспорт
	Поиск = Документы.Заказы.НайтиПоРеквизиту("Ид", ЗаписьПользователя["id"]);
	Если Поиск.Пустая() Тогда
		Поиск = Документы.Заказы.СоздатьДокумент();
		Поиск.Номер = ЗаписьПользователя["num"];
		Поиск.Дата = ЗаписьПользователя["dat"];
	Иначе
		Поиск = Поиск.ПолучитьОбъект();
	КонецЕсли;
	Поиск.Оплаты.Очистить();
	Поиск.Услуги.Очистить();
	Поиск.Статус = Справочники.СтатусыЗаказов.НайтиПоРеквизиту("Ид",ЗаписьПользователя["statusId"]);
	Поиск.Ид = ЗаписьПользователя["id"];
	Поиск.Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("Ид",ЗаписьПользователя["kontragId"]);
	Поиск.ДатаЗамера = ЗаписьПользователя["datZam"];
	Поиск.ДатаВыполнения = ЗаписьПользователя["datComplete"];
	Поиск.Менеджер = Справочники.Менеджеры.НайтиПоРеквизиту("Ид",ЗаписьПользователя["managerId"]);
	Поиск.Замерщик = Справочники.Контрагенты.НайтиПоРеквизиту("Ид",ЗаписьПользователя["zamerId"]);
	Поиск.Комментарий = ЗаписьПользователя["discription"];
	Попытка
		Поиск.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьСинхронизациюТЧОплаты(ЗаписьТЧ) Экспорт
	Поиск = Документы.Заказы.НайтиПоРеквизиту("Ид", ЗаписьТЧ["orderId"]);
	Если Поиск.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	ПоискОбъект = Поиск.ПолучитьОбъект();
	
	Оплаты = ПоискОбъект.Оплаты.Добавить();
	Оплаты.ДатаОплаты = ЗаписьТЧ["dat"];
	Оплаты.СуммаОплаты = ЗаписьТЧ["sum"];
	Оплаты.Касса = Справочники.Кассы.НайтиПоРеквизиту("Ид",ЗаписьТЧ["kassaId"]);
	Оплаты.Замерщик = Справочники.Контрагенты.НайтиПоРеквизиту("Ид",ЗаписьТЧ["zamerId"]);
	Оплаты.ПользовательИд = ЗаписьТЧ["userId"];
	Оплаты.Ид = ЗаписьТЧ["id"];
	
	Попытка
		ПоискОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	КонецПопытки;

КонецПроцедуры	

Процедура ВыполнитьСинхронизациюТЧУслуги(ЗаписьТЧ) Экспорт
	Поиск = Документы.Заказы.НайтиПоРеквизиту("Ид", ЗаписьТЧ["orderId"]);
	Если Поиск.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	ПоискОбъект = Поиск.ПолучитьОбъект();
	
	Услуги = ПоискОбъект.Услуги.Добавить();
	Услуги.ВидРабот = Справочники.Номенклатура.НайтиПоРеквизиту("Ид",ЗаписьТЧ["groupId"]);
	Услуги.Работа = Справочники.Номенклатура.НайтиПоРеквизиту("Ид",ЗаписьТЧ["nomId"]);
	Услуги.ЕдИзм = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("Ид",ЗаписьТЧ["measureId"]);
	Услуги.Количество = ЗаписьТЧ["quantity"];
	Услуги.Цена =  ЗаписьТЧ["price"];
	Услуги.Сумма = ЗаписьТЧ["summ"];
	Услуги.ДопРаботы = ЗаписьТЧ["addWork"];
	Услуги.ДопСумма = ЗаписьТЧ["priceAdd"];
	Услуги.Ид = ЗаписьТЧ["id"];

	Услуги.Замерщик = Справочники.Контрагенты.НайтиПоРеквизиту("Ид",ЗаписьТЧ["sotrId"]);
	
	Попытка
		ПоискОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	КонецПопытки;

КонецПроцедуры	


Процедура ВыполнитьСинхронизациюКасс(ЗаписьКассы) Экспорт
	Поиск = Справочники.Кассы.НайтиПоРеквизиту("Ид", ЗаписьКассы["id"]);
	Если Поиск.Пустая() Тогда
		Поиск = Справочники.Кассы.СоздатьЭлемент();
		Поиск.УстановитьНовыйКод();
	Иначе
		Поиск = Поиск.ПолучитьОбъект();
	КонецЕсли;
	Поиск.Наименование = ЗаписьКассы["fullname"];
	Поиск.Ид = ЗаписьКассы["id"];	
	Попытка
		Поиск.Записать();
	Исключение
	КонецПопытки;

КонецПроцедуры	

// Функция формирует SOAP-сообщения для операции checkText.
//
// Параметры
//  Текст  - Строка - текст для проверки орфографии.
//
// Возвращаемое значение:
//   строка   - SOAP-сообщение в формате XML.
//
Функция СформироватьСообщениеSOAP(Текст) 
	Шаблон = 
   "<soapenv:Envelope 
    |xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" 
	|xmlns:oraw=""http://xmlns.oracle.com/orawsv"">
	|<soapenv:Header/>
	|   <soapenv:Body>
	|   <oraw:query>
	|         <oraw:query_text type=""SQL"">
	|      <![CDATA[" + Текст + "]]>
	|      </oraw:query_text>
	|	   <oraw:pretty_print>true</oraw:pretty_print>
	|      </oraw:query>
	|   </soapenv:Body>
	|</soapenv:Envelope>";

	
	Возврат Шаблон;

КонецФункции // СформироватьСообщениеSOAP()

// Функция осуществляет вызов веб-сервиса POST-запросом.
//
// Параметры
//  ПроверяемыйТекст  - Строка - текст для проверки правописания.
//
// Возвращаемое значение:
//   Строка   - ответ веб-сервиса в формате XML.
//
Функция ВернутьSOAPОтвет(ПроверяемыйТекст, ИмяФайла = Неопределено) Экспорт
	
	 Сервер = Справочники.НастройкиSOAP.Основная.АдресСервера;
	 Пользов = Справочники.НастройкиSOAP.Основная.СистемныйПользователь;
	 Пароль = Справочники.НастройкиSOAP.Основная.СистемныйПароль;
	 Если ЗначениеЗаполнено(Сервер) И 
		  ЗначениеЗаполнено(Пользов) И
		  ЗначениеЗаполнено(Пароль) Тогда
	
	 	Заголовки = Новый Соответствие;
	 	Заголовки.Вставить("Content-Type",	"text/xml;charset=UTF-8");
	 	Заголовки.Вставить("SOAPAction",	"http://" + Сервер);
	 
	 	HTTPЗапрос = Новый HTTPЗапрос("", Заголовки);
	 	HTTPЗапрос.УстановитьТелоИзСтроки(СформироватьСообщениеSOAP(ПроверяемыйТекст), "UTF-8");
	 	HTTPСоединение = Новый HTTPСоединение(Пользов+":"+Пароль+"@"+Сервер); 
	 	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяФайла);
	 
	 	Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
	КонецЕсли;
		
	Возврат "Веб сервис не настроен";

	
КонецФункции // ПроверитьОрфографию()

Функция ПользовательРазрешенXML(ИмяВыходногоФайла) Экспорт
	Рез = Ложь;
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьСтатуса = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:ENBL",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			Разрешено = Число(ЭлементПоиска.ТекстовоеСодержимое);
			Рез = Разрешено = 1;	
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции

Функция ПользовательЯвляетсяАдминистратором(Логин) Экспорт
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select g_name from groupmembers where upper(g_member) like '"+ВРег(Логин)+"' and upper(g_name) like 'ADMINISTRATOR'";
	ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Рез = Ложь;
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьСтатуса = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:G_NAME",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			Рез = Истина;	
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции

Функция ПолучитьИдентификаторПользователя(Логин) Экспорт
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select id from users where upper(login) like '"+Врег(Логин)+"'";
	ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Рез = Неопределено;
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьСтатуса = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:ID",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			Рез = СокрЛП(ЭлементПоиска.ТекстовоеСодержимое);	
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции

Функция ПолучитьИдПользователяПоНаименованию(Логин) Экспорт
	Рез = "0000";
	ИдПользователя = Справочники.Пользователи.НайтиПоНаименованию(Логин);
	Если НЕ ИдПользователя.Пустая() Тогда
		Рез = ИдПользователя.Ид;
	КонецЕсли;	
	Возврат Рез;
КонецФункции	

Функция ПользовательЯвляетсяДиспетчером(Логин) Экспорт
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select g_name from groupmembers where upper(g_member) like '"+ВРег(Логин)+"' and upper(g_name) like 'Z_DISPATCHER'";
	ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Рез = Ложь;
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьСтатуса = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:G_NAME",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			Рез = Истина;	
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции

Функция ПользовательЯвляетсяЗамерщиком(Логин) Экспорт
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select g_name from groupmembers where upper(g_member) like '"+ВРег(Логин)+"' and upper(g_name) like 'Z_MANAGER'";
	ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Рез = Ложь;
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьСтатуса = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:G_NAME",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			Рез = Истина;	
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции

Функция ПользовательЯвляетсяДиректором(Логин) Экспорт
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select g_name from groupmembers where upper(g_member) like '"+ВРег(Логин)+"' and upper(g_name) like 'DIRECTOR'";
	ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Рез = Ложь;
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьСтатуса = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:G_NAME",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			Рез = Истина;	
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции


Функция ВыполнитьАвторизациюПользователя() Экспорт
	////Создаем прокси для обращения к внешнему веб-сервису,
	//// передаем в функцию URI пространства имен, имя сервиса, имя порта.
	//Прокси = WSСсылки.DivasQueryWS.СоздатьWSПрокси(
	//                                     "http://xmlns.oracle.com/orawsv", "ORAWSVService", "ORAWSVPort");
	//
	////Получаем тип параметра, который передается в метод GetCursOnDate.
	//ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить(
	//                                    "http://xmlns.oracle.com/orawsv").Получить("query_query_text");
	////Создаем параметр на основе типа и заполняем значение параметра On_Date.
	//WSПараметр	   = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	//WSПараметр.__content	= "<![CDATA[SELECT * FROM order_status]]>";
	//Прокси.Пользователь = "dba_divas";
	//Прокси.Пароль = "divas";
	////Прокси.
	//Ответ = Прокси.XMLFromQuery(WSПараметр);

КонецФункции	

Функция ТекущийПользовательРазрешен() Экспорт
	Логин = ПараметрыСеанса.ТекущийПользователь.Наименование;
	КодДоступа = ПараметрыСеанса.ТекущийПользователь.КлючДоступа;
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select soap.get_access_from_key('"+Логин+"','"+КодДоступа+"') enbl from dual";
	ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	Отказ = НЕ ПользовательРазрешенXML(ИмяВыходногоФайла);
	Возврат Отказ;
КонецФункции	

Процедура ОкончательноеУдалениеДанных() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура";
	Рез = Запрос.Выполнить();
	Результат = Рез.Выгрузить();
	Для Каждого Строка Из Результат Цикл
		СтОбъект = Строка.Ссылка.ПолучитьОбъект();
		Попытка
			СтОбъект.Удалить();
		Исключение
		КонецПопытки;	
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕдиницыИзмерения.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения";
	Рез = Запрос.Выполнить();
	Результат = Рез.Выгрузить();
	Для Каждого Строка Из Результат Цикл
		СтОбъект = Строка.Ссылка.ПолучитьОбъект();
		Попытка
			СтОбъект.Удалить();
		Исключение
		КонецПопытки;	
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Расчеты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Расчеты КАК Расчеты";
	Рез = Запрос.Выполнить();
	Результат = Рез.Выгрузить();
	Для Каждого Строка Из Результат Цикл
		СтОбъект = Строка.Ссылка.ПолучитьОбъект();
		Попытка
			СтОбъект.Удалить();
		Исключение
		КонецПопытки;	
	КонецЦикла;

	
	Узел = ПланыОбмена.ОбменСОсновнойБазой.НайтиПоКоду("ORA");
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел);	

КонецПроцедуры	

Процедура УдалитьДанныеПоНеавторизованномуПользователю() Экспорт
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Кассы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Кассы КАК Кассы";
	Рез = Запрос.Выполнить();
	Результат = Рез.Выгрузить();
	Для Каждого Строка Из Результат Цикл
		СтОбъект = Строка.Ссылка.ПолучитьОбъект();
		Попытка
			СтОбъект.Удалить();
		Исключение
		КонецПопытки;	
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Менеджеры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Менеджеры КАК Менеджеры";
	Рез = Запрос.Выполнить();
	Результат = Рез.Выгрузить();
	Для Каждого Строка Из Результат Цикл
		СтОбъект = Строка.Ссылка.ПолучитьОбъект();
		Попытка
			СтОбъект.Удалить();
		Исключение
		КонецПопытки;	
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.КонтактнаяИнформация КАК КонтактнаяИнформация";
	Рез = Запрос.Выполнить();
	Результат = Рез.Выгрузить();
	Для Каждого Строка Из Результат Цикл
		СтОбъект = Строка.Ссылка.ПолучитьОбъект();
		Попытка
			СтОбъект.Удалить();
		Исключение
		КонецПопытки;	
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты";
	Рез = Запрос.Выполнить();
	Результат = Рез.Выгрузить();
	Для Каждого Строка Из Результат Цикл
		СтОбъект = Строка.Ссылка.ПолучитьОбъект();
		Попытка
			СтОбъект.Удалить();
		Исключение
		КонецПопытки;	
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Заказы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Заказы КАК Заказы";
	Рез = Запрос.Выполнить();
	Результат = Рез.Выгрузить();
	Для Каждого Строка Из Результат Цикл
		СтОбъект = Строка.Ссылка.ПолучитьОбъект();
		Попытка
			СтОбъект.Удалить();
		Исключение
		КонецПопытки;	
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыЗаказов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СтатусыЗаказов КАК СтатусыЗаказов";
	Рез = Запрос.Выполнить();
	Результат = Рез.Выгрузить();
	Для Каждого Строка Из Результат Цикл
		СтОбъект = Строка.Ссылка.ПолучитьОбъект();
		Попытка
			СтОбъект.Удалить();
		Исключение
		КонецПопытки;	
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Города.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Города КАК Города";
	Рез = Запрос.Выполнить();
	Результат = Рез.Выгрузить();
	Для Каждого Строка Из Результат Цикл
		СтОбъект = Строка.Ссылка.ПолучитьОбъект();
		Попытка
			СтОбъект.Удалить();
		Исключение
		КонецПопытки;	
	КонецЦикла;

	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформационныеКарты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ИнформационныеКарты КАК ИнформационныеКарты";
	Рез = Запрос.Выполнить();
	Результат = Рез.Выгрузить();
	Для Каждого Строка Из Результат Цикл
		СтОбъект = Строка.Ссылка.ПолучитьОбъект();
		Попытка
			СтОбъект.Удалить();
		Исключение
		КонецПопытки;	
	КонецЦикла;

	
	Узел = ПланыОбмена.ОбменСОсновнойБазой.НайтиПоКоду("ORA");
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел);	
КонецПроцедуры	


Функция СохранитьКонтрагентаВБазу(ЗаписьКонтрагент) Экспорт
	Рез = Ложь;
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select soap.update_kontrag('"+ЗаписьКонтрагент["id"]+"','"+ЗаписьКонтрагент["fullname"]+"') enbl from dual";
	ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Рез = Ложь;
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьСтатуса = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:ENBL",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			Разрешено = Число(ЭлементПоиска.ТекстовоеСодержимое);
			Рез = Разрешено = 1;	
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции

Функция СохранитьКонтактнуюИнформациюВБазу(ЗаписьКонтакт) Экспорт
	Рез = Ложь;
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select soap.update_contact('"+ЗаписьКонтакт["id"]+"','"+ЗаписьКонтакт["adress"]+"','"+ЗаписьКонтакт["phone"]+"','"+ЗаписьКонтакт["email"]+"') enbl from dual";
	ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Рез = Ложь;
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьСтатуса = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:ENBL",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			Разрешено = Число(ЭлементПоиска.ТекстовоеСодержимое);
			Рез = Разрешено = 1;	
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции

Функция СохранитьЗаказВБазу(ЗаписьКонтакт) Экспорт
	Рез = Ложь;
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запрос = "select soap.update_order('"+ЗаписьКонтакт["id"]+"','"+ЗаписьКонтакт["status_id"]+"','"+ЗаписьКонтакт["discription"]+"', to_date('"+ЗаписьКонтакт["dat_complete"]+"','YYYY-MM-dd'),'"+ЗаписьКонтакт["zamer_id"]+"') enbl from dual";
	ВернутьSOAPОтвет(Запрос, ИмяВыходногоФайла);
	
	Рез = Ложь;
	Файл = Новый ЧтениеXML();
	Файл.ОткрытьФайл(ИмяВыходногоФайла);
	ПостроительDOM = Новый ПостроительDOM;
	Лист = ПостроительDOM.Прочитать(Файл);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(Лист);
	РезультатПоиска = Лист.ВычислитьВыражениеXPath("/soap:Envelope/soap:Body",Лист.ЭлементДокумента,Разыменователь);
	Пока Истина Цикл
		ЗаписьСтатуса = Новый Соответствие;
		Элемент = РезультатПоиска.ПолучитьСледующий();
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЭлементПоиска = Лист.ВычислитьВыражениеXPath("ns:queryOut/ns:ROWSET/ns:ROW/ns:ENBL",Элемент,Новый РазыменовательПространствИменDOM("ns","http://xmlns.oracle.com/orawsv")).ПолучитьСледующий();
		Если ЭлементПоиска <> Неопределено Тогда
			Разрешено = Число(ЭлементПоиска.ТекстовоеСодержимое);
			Рез = Разрешено = 1;	
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции


