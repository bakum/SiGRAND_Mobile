&НаКлиенте
Перем ТаблицаСсылок;

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для Каждого Строка Из Объект.УдаляемыеОбъекты Цикл
		Строка.Удалять = Ложь;
	КонецЦикла;	
КонецПроцедуры

// Функция преобразует ТаблицуЗначений в Массив из структур.
//
Функция ПреобразоватьТаблицуЗначенийВМассив(тзДанные) Экспорт
    
    мсДанные = Новый Массив;
        
    // Запишем в массив
    Для Каждого СтрокаТЗ Из тзДанные Цикл
        
        стСтрокаТаблицы = Новый Структура;
        Для Каждого ИмяКолонки Из тзДанные.Колонки Цикл
            стСтрокаТаблицы.Вставить(ИмяКолонки.Имя, СтрокаТЗ[ИмяКолонки.Имя]);
        КонецЦикла;
        
        мсДанные.Добавить(стСтрокаТаблицы);
        
    КонецЦикла;
    
    Возврат мсДанные;
    
КонецФункции // ПреобразоватьТаблицуЗначенийВМассив()

// Функция преобразует Массив из структур в ТаблицуЗначений.
//
Функция ПреобразоватьМассивВТаблицуЗначений(мсДанные) Экспорт
    
    тзДанные = Новый ТаблицаЗначений;
    
    Для Каждого ЭлементМассива Из мсДанные Цикл
        // Рисуем колонки для таблицы
        Если тзДанные.Колонки.Количество() = 0 Тогда
            Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
                тзДанные.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
            КонецЦикла;
        КонецЕсли;
        
        // Добавляем данные в таблицу
        НоваяСтрока = тзДанные.Добавить();
        Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
        КонецЦикла;
    КонецЦикла;
    
    Возврат тзДанные;
    
КонецФункции // ПреобразоватьМассивВТаблицуЗначений()

// Выполняет поиск помеченных на удаление объектов
// и заполняет ими таблицу УдаляемыеОбъекты
//
&НаСервере
Функция вОбновитьПомеченныеНаУдаление()
	//Состояние("Выполняется поиск объектов, помеченных на удаление...");
	//ПоказыватьОбъектыКоторыеМожноУдалить = Истина;
	//ПоказыватьОбъектыКоторыеНельзяУдалить = Истина;
	//ПоказыватьСсылкиУдаляемых = Истина;
	//ПоказыватьСсылкиНеудаляемых = Истина;
	Объект.СсылкиНаУдаляемыеОбъекты.Очистить();
	//ТаблицаСсылок = Ложь;
	Объект.УдаляемыеОбъекты.Очистить();
	СоответствиеТипаКМетаданному = Новый Соответствие;
	
	Попытка
		МассивКУдалению = НайтиПомеченныеНаУдаление();
	Исключение
		Сообщить("У пользователя не достаточно прав на выполнение операции.");
		Возврат Ложь;
	КонецПопытки;
	
	Для каждого УдаляемыйОбъект из МассивКУдалению цикл
		СтрокаУдаляемогоОбъекта = Объект.УдаляемыеОбъекты.Добавить();
		СтрокаУдаляемогоОбъекта.ссылка = УдаляемыйОбъект;
		СтрокаУдаляемогоОбъекта.ПредставлениеСсылки = УдаляемыйОбъект;
		ТипУдаляемогоОбъекта = ТипЗНЧ(УдаляемыйОбъект);
		ИмяМетаданного = СоответствиеТипаКМетаданному[ТипУдаляемогоОбъекта];
		Если ИмяМетаданного = Неопределено Тогда
			ИмяМетаданного = УдаляемыйОбъект.Метаданные().ПолноеИмя();
			СоответствиеТипаКМетаданному.Вставить(ТипУдаляемогоОбъекта,ИмяМетаданного);
		КонецЕсли; 
		СтрокаУдаляемогоОбъекта.Метаданные = ИмяМетаданного;
		СтрокаУдаляемогоОбъекта.Удалять = Истина;
		СтрокаУдаляемогоОбъекта.Удаляется = Истина;
		СтрокаУдаляемогоОбъекта.ИндексКартинки = 1;
	КонецЦикла;
	//ЭлементыФормы.УдаляемыеОбъекты.ОтборСтрок.Сбросить();
	//вДоступностьКнопок();
	//вПодсчитатьИтогУдаляемыеОбъекты();
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТаблицаСсылок = Ложь;
	вОбновитьПомеченныеНаУдаление();
	вДоступностьКнопок();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Для Каждого Строка Из Объект.УдаляемыеОбъекты Цикл
		Строка.Удалять = Истина;
	КонецЦикла;
КонецПроцедуры

// Выполняет поиск ссылок на помеченные на удаление объекты,
// заполняет ими таблицу значений "ТаблицаСсылок",
// производит контроль на возможность удаления
//
&НаСервере
Функция вКонтроль()
	//ЕстьПомеченныеНеВОтборе = Ложь;
	//ТекОтбор = ЭлементыФормы.УдаляемыеОбъекты.ОтборСтрок.Метаданные;
	//Для Каждого СтрокаУдаляемогоОбъекта из УдаляемыеОбъекты Цикл
	//	Если СтрокаУдаляемогоОбъекта.Удалять  Тогда
	//		Если Не вВходитВОтбор(СтрокаУдаляемогоОбъекта.Метаданные,ТекОтбор) Тогда
	//			ЕстьПомеченныеНеВОтборе = Истина;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//Если ЕстьПомеченныеНеВОтборе Тогда
	//	Ответ = Вопрос("Существуют выбранные записи не попавшие в текущий отбор.
	//	|Снять флажки у непопавших в отбор?", РежимДиалогаВопрос.ДаНетОтмена);
	//	Если Ответ = КодВозвратаДиалога.Отмена Тогда
	//		Возврат;
	//	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
	//		Для Каждого СтрокаУдаляемогоОбъекта из УдаляемыеОбъекты Цикл
	//			Если СтрокаУдаляемогоОбъекта.Удалять  Тогда
	//				Если Не вВходитВОтбор(СтрокаУдаляемогоОбъекта.Метаданные,ТекОтбор) Тогда
	//					СтрокаУдаляемогоОбъекта.Удалять = Ложь;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли;
	//Состояние("Выполняется поиск ссылок на объекты, помеченные на удаление...");
	МассивКУдалению = Новый Массив;
	Для Каждого СтрокаУдаляемогоОбъекта из Объект.УдаляемыеОбъекты Цикл
		Если СтрокаУдаляемогоОбъекта.Удалять  Тогда
			МассивКУдалению.Добавить(СтрокаУдаляемогоОбъекта.Ссылка);
			СтрокаУдаляемогоОбъекта.Удаляется = Истина;
		Иначе
			СтрокаУдаляемогоОбъекта.Удаляется = Ложь;
		КонецЕсли;
		СтрокаУдаляемогоОбъекта.НеУдаляемыхСсылок = 0;
		СтрокаУдаляемогоОбъекта.Ссылок = 0;
	КонецЦикла;
	Объект.СсылкиНаУдаляемыеОбъекты.Очистить();
	//ТаблицаСсылок.Очистить();
	//ТабСсылок.Очистить();
	ТаблицаСсылок = НайтиПоСсылкам(МассивКУдалению);
	ТаблицаСсылок.Колонки.Добавить("СтрокаУдаляемого");
	ТаблицаСсылок.Колонки.Добавить("СтрокаДанного");
	ТаблицаСсылок.Колонки.Добавить("ИндексКартинки");
	ТаблицаСсылок.Колонки.Добавить("Удаляется");
	
	
	Для каждого ЭлементТаблицыСсылок из ТаблицаСсылок Цикл
		Ссылка = ЭлементТаблицыСсылок.ссылка;
		Данные = ЭлементТаблицыСсылок.Данные;
		СтрокаСсылки = Объект.УдаляемыеОбъекты.Найти(Ссылка,"Ссылка");
		МетаданныеДанных = ЭлементТаблицыСсылок.Метаданные;
		ИмяМетаданных = МетаданныеДанных.ПолноеИмя();
		
		Если Лев(ИмяМетаданных,15) = "РегистрСведений" Тогда
			ИзмеренияРегистраСведений = МетаданныеДанных.Измерения;
			УдаляетсяРегистрСведений = Ложь;
			Для Каждого Измерение Из ИзмеренияРегистраСведений Цикл
				Если Измерение.Ведущее Тогда
					Если Ссылка = Данные[Измерение.Имя] Тогда
						УдаляетсяРегистрСведений = Истина;
						ЭлементТаблицыСсылок.Данные = ссылка;
						Данные = ссылка;
						Прервать;
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла;
			Если Не УдаляетсяРегистрСведений Тогда
				ЭлементТаблицыСсылок.Данные = Неопределено;
				Данные = Неопределено;
			КонецЕсли; 
		КонецЕсли;
		
		
		Если Данные = Неопределено Тогда
			ЭлементТаблицыСсылок.ИндексКартинки = 3;
			СтрокаДанного = Неопределено;
		Иначе
			СтрокаДанного = ?(Данные = Ссылка,СтрокаСсылки,Объект.УдаляемыеОбъекты.Найти(Данные,"Ссылка"));
			ЭлементТаблицыСсылок.ИндексКартинки =?(Данные.ПометкаУдаления,1,0);
		КонецЕсли; 
		СтрокаСсылки.Ссылок = СтрокаСсылки.Ссылок + 1;
		УдаляетсяСсылка = СтрокаСсылки.Удаляется;
		Если СтрокаДанного = Неопределено Тогда
			УдаляетсяДанное = Ложь;
			Если УдаляетсяСсылка Тогда
				СтрокаСсылки.Удаляется = Ложь;
			КонецЕсли; 
		Иначе
			УдаляетсяДанное = СтрокаДанного.Удаляется;
			Если Не УдаляетсяДанное Тогда
				Если УдаляетсяСсылка Тогда
					СтрокаСсылки.Удаляется = ложь;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		Если УдаляетсяДанное = ложь Тогда
			СтрокаСсылки.НеУдаляемыхСсылок = СтрокаСсылки.НеУдаляемыхСсылок + 1;
		КонецЕсли; 
		ЭлементТаблицыСсылок.Удаляется = УдаляетсяДанное;
		ЭлементТаблицыСсылок.СтрокаУдаляемого = СтрокаСсылки;
		ЭлементТаблицыСсылок.СтрокаДанного = СтрокаДанного;
	КонецЦикла;
	НашлиДляИсключения = Истина;
	Пока НашлиДляИсключения Цикл
		НашлиДляИсключения = Ложь;
		Для каждого ЭлементТаблицыСсылок из ТаблицаСсылок Цикл
			СтрокаДанного = ЭлементТаблицыСсылок.СтрокаДанного;
			Если  СтрокаДанного <> Неопределено Тогда
				УдаляетсяДанное = СтрокаДанного.Удаляется;
				Удаляется = ЭлементТаблицыСсылок.Удаляется;
				СтрокаСсылки = ЭлементТаблицыСсылок.СтрокаУдаляемого;
				УдаляетсяСсылка = СтрокаСсылки.Удаляется;
				Если Удаляется и Не УдаляетсяДанное  Тогда
					ЭлементТаблицыСсылок.Удаляется = Ложь;
					СтрокаСсылки.НеУдаляемыхСсылок = СтрокаСсылки.НеУдаляемыхСсылок + 1;
				КонецЕсли;
				Если УдаляетсяСсылка И Не УдаляетсяДанное Тогда
					СтрокаСсылки.Удаляется = ложь;
					НашлиДляИсключения = Истина;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	//вДоступностьКнопок();
	//вПодсчитатьИтогУдаляемыеОбъекты();
	//вПодсчитатьИтогСсылкиНаУдаляемыеОбъекты();
	//вПоказатьСсылкиНаУдаляемыйОбъект();
	//Рез = Новый Соответствие;
	//Рез.Вставить("ТаблицаСсылок",ТаблицаСсылок);
	//АдресХранилища = ПоместитьВоВременноеХранилище(ТаблицаСсылок,ЭтаФорма.УникальныйИдентификатор);
	//ТабСсылок = ТаблицаСсылок.Скопировать(); 
	Возврат ПоместитьВоВременноеХранилище(ПреобразоватьТаблицуЗначенийВМассив(ТаблицаСсылок));
КонецФункции

// Устанавливает доступность элементов управления в зависимости от режима
//
&НаКлиенте
Процедура вДоступностьКнопок() 
	//БылКонтроль = ?(ТабСсылок.Количество() = 0,Ложь,Истина);
	БылКонтроль = ?(ТаблицаСсылок = Ложь,Ложь,Истина);
	Элементы.Контроль.Доступность = не БылКонтроль;
	//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Контроль.Доступность = не БылКонтроль;
	//ЭлементыФормы.УдаляемыеОбъекты.Колонки.Удалять.ТолькоПросмотр = БылКонтроль;
	Элементы.УдаляемыеОбъектыУдалять.ТолькоПросмотр = БылКонтроль;
	//ЭлементыФормы.КоманднаяПанельУдаляемыхОбъектов.Кнопки.УстановитьФлажки.Доступность = не БылКонтроль;
	Элементы.УстановитьФлажки.Доступность = не БылКонтроль;
	//ЭлементыФормы.КоманднаяПанельУдаляемыхОбъектов.Кнопки.СнятьФлажки.Доступность = не БылКонтроль;
	Элементы.УдаляемыеОбъектыСнятьФлажки.Доступность = не БылКонтроль;
	//ЭлементыФормы.ПоказыватьОбъектыКоторыеМожноУдалить.Доступность = БылКонтроль;
	//ЭлементыФормы.ПоказыватьОбъектыКоторыеНельзяУдалить.Доступность = БылКонтроль;
	//ЭлементыФормы.ПоказыватьСсылкиУдаляемых.Доступность = БылКонтроль;
	//ЭлементыФормы.ПоказыватьСсылкиНеудаляемых.Доступность = БылКонтроль;
	Если БылКонтроль Тогда
		ВозможноУдалить = Ложь;
		Для Каждого СтрокаУдаляемогоОбъекта из Объект.УдаляемыеОбъекты Цикл
			Если СтрокаУдаляемогоОбъекта.Удалять и СтрокаУдаляемогоОбъекта.Удаляется Тогда
				ВозможноУдалить = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить.Доступность = ВозможноУдалить;
		Элементы.УдаляемыеОбъектыУдалить.Доступность =  ВозможноУдалить;
	Иначе
		//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить.Доступность = Ложь;
		Элементы.УдаляемыеОбъектыУдалить.Доступность =  Ложь;
	КонецЕсли; 
КонецПроцедуры


// Выполняет удаление помеченные объектов,
// Которые возможно удалить
//
&НаСервере
Процедура вУдалить(Знач ТабСсылок)
	//ЕстьПомеченныеНеВОтборе = Ложь;
	//ТекОтбор = ЭлементыФормы.УдаляемыеОбъекты.ОтборСтрок.Метаданные;
	//Для Каждого СтрокаУдаляемогоОбъекта из УдаляемыеОбъекты Цикл
	//	Если СтрокаУдаляемогоОбъекта.Удалять  Тогда
	//		Если не вВходитВОтбор(СтрокаУдаляемогоОбъекта.Метаданные,ТекОтбор) Тогда
	//			ЕстьПомеченныеНеВОтборе = Истина;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//Если ЕстьПомеченныеНеВОтборе Тогда
	//	Если Вопрос("Существуют выбранные записи не попавшие в текущий отбор
	//	|Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//вСообщитьОбОшибке("---------------------- Удаление объектов -----------------------",);
	Удалено = 0;
	НеУдалено = 0;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Удаляется",Истина);
	МассивУдаляемых = Объект.УдаляемыеОбъекты.НайтиСтроки(СтруктураОтбора);
	СтруктураОтбора.Очистить();
	ТаблицаСсылок = ПреобразоватьМассивВТаблицуЗначений(ТабСсылок);
	Для Каждого СтрокаУдаляемогоОбъекта из МассивУдаляемых Цикл
		СсылкаДляУдаления = СтрокаУдаляемогоОбъекта.Ссылка;
		ОбъектДляУдаления = СсылкаДляУдаления.ПолучитьОбъект();
		
		Попытка 
			
			Если Не Объект = Неопределено Тогда
				ОбъектДляУдаления.Удалить();
			КонецЕсли;
			
			//вСообщитьОбОшибке("Удален объект :"+СокрЛП(СтрокаУдаляемогоОбъекта.Метаданные)+": "+СтрокаУдаляемогоОбъекта.ПредставлениеСсылки,СтатусСообщения.Информация);
			Объект.УдаляемыеОбъекты.Удалить(СтрокаУдаляемогоОбъекта);
			СтруктураОтбора.Вставить("Ссылка",СсылкаДляУдаления);
			Попытка
				МассивСсылок = ТаблицаСсылок.НайтиСтроки(СтруктураОтбора);
			Исключение
				МассивСсылок = Новый Массив;
			КонецПопытки;
			Для Каждого СтрокаСсылки из МассивСсылок Цикл
				ТаблицаСсылок.Удалить(СтрокаСсылки);
			КонецЦикла;
			Удалено = Удалено+1;
		Исключение
			Сообщить("Не удален объект :"+СокрЛП(СтрокаУдаляемогоОбъекта.Метаданные)+": "+СтрокаУдаляемогоОбъекта.ПредставлениеСсылки,СтатусСообщения.Важное);
			Сообщить("         "+ОписаниеОшибки(),СтатусСообщения.Важное);
			НеУдалено = НеУдалено+1;
		КонецПопытки;
		
	КонецЦикла;
	Сообщить("Удаление объектов закончено. Удалено объектов : "+Удалено
	+?(НеУдалено <> 0,"   Не удалено объектов : "+НеУдалено,""),);
	//вДоступностьКнопок();
	
КонецПроцедуры // вУдалить() 

&НаКлиенте
Процедура Контроль(Команда)
	Адрес = вКонтроль();
	ТаблицаСсылок = ПолучитьИзВременногоХранилища(Адрес);
	вДоступностьКнопок();
КонецПроцедуры

&НаКлиенте
Процедура НайтиПомеченныеНаУдаление(Команда)
	ТаблицаСсылок = Ложь;
	вОбновитьПомеченныеНаУдаление();
	вДоступностьКнопок();
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	вУдалить(ТаблицаСсылок);
	вДоступностьКнопок();
КонецПроцедуры
